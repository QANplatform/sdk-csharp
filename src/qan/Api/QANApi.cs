/*
 * QAN AutoApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using qan.Client;
using qan.qan;

namespace qan.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQANApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the latest block number of the blockchain.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputBlockNumber</returns>
        OutputBlockNumber QanBlockNumber(int operationIndex = 0);

        /// <summary>
        /// Returns the latest block number of the blockchain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputBlockNumber</returns>
        ApiResponse<OutputBlockNumber> QanBlockNumberWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Executes a new message call immediately without creating a transaction on the block chain.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCall"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputCall</returns>
        OutputCall QanCall(InputCall inputCall, int operationIndex = 0);

        /// <summary>
        /// Executes a new message call immediately without creating a transaction on the block chain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCall"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputCall</returns>
        ApiResponse<OutputCall> QanCallWithHttpInfo(InputCall inputCall, int operationIndex = 0);
        /// <summary>
        /// Returns the current network/chain ID, used to sign replay-protected transaction introduced in EIP-155.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputChainId</returns>
        OutputChainId QanChainId(int operationIndex = 0);

        /// <summary>
        /// Returns the current network/chain ID, used to sign replay-protected transaction introduced in EIP-155.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputChainId</returns>
        ApiResponse<OutputChainId> QanChainIdWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Returns an estimation of gas for a given transaction.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEstimateGas"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputEstimateGas</returns>
        OutputEstimateGas QanEstimateGas(InputEstimateGas inputEstimateGas, int operationIndex = 0);

        /// <summary>
        /// Returns an estimation of gas for a given transaction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEstimateGas"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputEstimateGas</returns>
        ApiResponse<OutputEstimateGas> QanEstimateGasWithHttpInfo(InputEstimateGas inputEstimateGas, int operationIndex = 0);
        /// <summary>
        /// Returns the collection of historical gas information.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFeeHistory"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputFeeHistory</returns>
        OutputFeeHistory QanFeeHistory(InputFeeHistory inputFeeHistory, int operationIndex = 0);

        /// <summary>
        /// Returns the collection of historical gas information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFeeHistory"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputFeeHistory</returns>
        ApiResponse<OutputFeeHistory> QanFeeHistoryWithHttpInfo(InputFeeHistory inputFeeHistory, int operationIndex = 0);
        /// <summary>
        /// Returns the current gas price on the network in wei.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGasPrice</returns>
        OutputGasPrice QanGasPrice(int operationIndex = 0);

        /// <summary>
        /// Returns the current gas price on the network in wei.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGasPrice</returns>
        ApiResponse<OutputGasPrice> QanGasPriceWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Returns the balance of the account of given address.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">A 20 bytes long hexadecimal value representing an address</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending (optional, default to &quot;latest&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetBalance</returns>
        OutputGetBalance QanGetBalance(string address, string? blockNumber = default(string?), int operationIndex = 0);

        /// <summary>
        /// Returns the balance of the account of given address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">A 20 bytes long hexadecimal value representing an address</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending (optional, default to &quot;latest&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetBalance</returns>
        ApiResponse<OutputGetBalance> QanGetBalanceWithHttpInfo(string address, string? blockNumber = default(string?), int operationIndex = 0);
        /// <summary>
        /// Returns information of the block matching the given block hash.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash (32 bytes) of the block</param>
        /// <param name="transactionDetailFlag">The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetBlockByHash</returns>
        OutputGetBlockByHash QanGetBlockByHash(string hash, bool transactionDetailFlag, int operationIndex = 0);

        /// <summary>
        /// Returns information of the block matching the given block hash.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash (32 bytes) of the block</param>
        /// <param name="transactionDetailFlag">The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetBlockByHash</returns>
        ApiResponse<OutputGetBlockByHash> QanGetBlockByHashWithHttpInfo(string hash, bool transactionDetailFlag, int operationIndex = 0);
        /// <summary>
        /// Returns information of the block matching the given block number.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="transactionDetailFlag">The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetBlockByNumber</returns>
        OutputGetBlockByNumber QanGetBlockByNumber(string blockNumber, bool transactionDetailFlag, int operationIndex = 0);

        /// <summary>
        /// Returns information of the block matching the given block number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="transactionDetailFlag">The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetBlockByNumber</returns>
        ApiResponse<OutputGetBlockByNumber> QanGetBlockByNumberWithHttpInfo(string blockNumber, bool transactionDetailFlag, int operationIndex = 0);
        /// <summary>
        /// Returns all transaction receipts for a given block.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetBlockReceipts</returns>
        OutputGetBlockReceipts QanGetBlockReceipts(string blockNumber, int operationIndex = 0);

        /// <summary>
        /// Returns all transaction receipts for a given block.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetBlockReceipts</returns>
        ApiResponse<OutputGetBlockReceipts> QanGetBlockReceiptsWithHttpInfo(string blockNumber, int operationIndex = 0);
        /// <summary>
        /// Returns the number of transactions for the block matching the given block hash.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of the block</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetBlockTransactionCountByHash</returns>
        OutputGetBlockTransactionCountByHash QanGetBlockTransactionCountByHash(string hash, int operationIndex = 0);

        /// <summary>
        /// Returns the number of transactions for the block matching the given block hash.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of the block</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetBlockTransactionCountByHash</returns>
        ApiResponse<OutputGetBlockTransactionCountByHash> QanGetBlockTransactionCountByHashWithHttpInfo(string hash, int operationIndex = 0);
        /// <summary>
        /// Returns the number of transactions for the block matching the given block number.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetBlockTransactionCountByNumber</returns>
        OutputGetBlockTransactionCountByNumber QanGetBlockTransactionCountByNumber(string blockNumber, int operationIndex = 0);

        /// <summary>
        /// Returns the number of transactions for the block matching the given block number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetBlockTransactionCountByNumber</returns>
        ApiResponse<OutputGetBlockTransactionCountByNumber> QanGetBlockTransactionCountByNumberWithHttpInfo(string blockNumber, int operationIndex = 0);
        /// <summary>
        /// Returns the compiled bytecode of a smart contract.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the smart contract from which the bytecode will be obtained</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending (optional, default to &quot;latest&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetCode</returns>
        OutputGetCode QanGetCode(string address, string? blockNumber = default(string?), int operationIndex = 0);

        /// <summary>
        /// Returns the compiled bytecode of a smart contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the smart contract from which the bytecode will be obtained</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending (optional, default to &quot;latest&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetCode</returns>
        ApiResponse<OutputGetCode> QanGetCodeWithHttpInfo(string address, string? blockNumber = default(string?), int operationIndex = 0);
        /// <summary>
        /// Polling method for a filter, which returns an array of events that have occurred since the last poll.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">The filter id that is returned from getFilterChangesnewFilter, getFilterChangesnewBlockFilter or getFilterChangesnewPendingTransactionFilter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetFilterChanges</returns>
        OutputGetFilterChanges QanGetFilterChanges(string filterId, int operationIndex = 0);

        /// <summary>
        /// Polling method for a filter, which returns an array of events that have occurred since the last poll.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">The filter id that is returned from getFilterChangesnewFilter, getFilterChangesnewBlockFilter or getFilterChangesnewPendingTransactionFilter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetFilterChanges</returns>
        ApiResponse<OutputGetFilterChanges> QanGetFilterChangesWithHttpInfo(string filterId, int operationIndex = 0);
        /// <summary>
        /// Returns an array of all logs matching filter with given id.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The filter ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetFilterLogs</returns>
        OutputGetFilterLogs QanGetFilterLogs(string id, int operationIndex = 0);

        /// <summary>
        /// Returns an array of all logs matching filter with given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The filter ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetFilterLogs</returns>
        ApiResponse<OutputGetFilterLogs> QanGetFilterLogsWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Returns an array of all logs matching a given filter object.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetLogs"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetLogs</returns>
        OutputGetLogs QanGetLogs(InputGetLogs inputGetLogs, int operationIndex = 0);

        /// <summary>
        /// Returns an array of all logs matching a given filter object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetLogs"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetLogs</returns>
        ApiResponse<OutputGetLogs> QanGetLogsWithHttpInfo(InputGetLogs inputGetLogs, int operationIndex = 0);
        /// <summary>
        /// Returns the account and storage values of the specified account including the Merkle-proof.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetProof"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetProof</returns>
        OutputGetProof QanGetProof(InputGetProof inputGetProof, int operationIndex = 0);

        /// <summary>
        /// Returns the account and storage values of the specified account including the Merkle-proof.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetProof"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetProof</returns>
        ApiResponse<OutputGetProof> QanGetProofWithHttpInfo(InputGetProof inputGetProof, int operationIndex = 0);
        /// <summary>
        /// Returns the value from a storage position at a given address.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetStorageAt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetStorageAt</returns>
        OutputGetStorageAt QanGetStorageAt(InputGetStorageAt inputGetStorageAt, int operationIndex = 0);

        /// <summary>
        /// Returns the value from a storage position at a given address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetStorageAt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetStorageAt</returns>
        ApiResponse<OutputGetStorageAt> QanGetStorageAtWithHttpInfo(InputGetStorageAt inputGetStorageAt, int operationIndex = 0);
        /// <summary>
        /// Returns information about a transaction given a blockhash and transaction index position.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHash"></param>
        /// <param name="index">An integer of the transaction index position</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetTransactionByBlockHashAndIndex</returns>
        OutputGetTransactionByBlockHashAndIndex QanGetTransactionByBlockHashAndIndex(string blockHash, string index, int operationIndex = 0);

        /// <summary>
        /// Returns information about a transaction given a blockhash and transaction index position.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHash"></param>
        /// <param name="index">An integer of the transaction index position</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetTransactionByBlockHashAndIndex</returns>
        ApiResponse<OutputGetTransactionByBlockHashAndIndex> QanGetTransactionByBlockHashAndIndexWithHttpInfo(string blockHash, string index, int operationIndex = 0);
        /// <summary>
        /// Returns information about a transaction given a block number and transaction index position.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="index">An integer of the transaction index position</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetTransactionByBlockNumberAndIndex</returns>
        OutputGetTransactionByBlockNumberAndIndex QanGetTransactionByBlockNumberAndIndex(string blockNumber, string index, int operationIndex = 0);

        /// <summary>
        /// Returns information about a transaction given a block number and transaction index position.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="index">An integer of the transaction index position</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetTransactionByBlockNumberAndIndex</returns>
        ApiResponse<OutputGetTransactionByBlockNumberAndIndex> QanGetTransactionByBlockNumberAndIndexWithHttpInfo(string blockNumber, string index, int operationIndex = 0);
        /// <summary>
        /// Returns the information about a transaction from a transaction hash.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of a transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetTransactionByHash</returns>
        OutputGetTransactionByHash QanGetTransactionByHash(string hash, int operationIndex = 0);

        /// <summary>
        /// Returns the information about a transaction from a transaction hash.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of a transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetTransactionByHash</returns>
        ApiResponse<OutputGetTransactionByHash> QanGetTransactionByHashWithHttpInfo(string hash, int operationIndex = 0);
        /// <summary>
        /// Returns the number of transactions sent from an address.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address from which the transaction count to be checked</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetTransactionCount</returns>
        OutputGetTransactionCount QanGetTransactionCount(string address, string blockNumber, int operationIndex = 0);

        /// <summary>
        /// Returns the number of transactions sent from an address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address from which the transaction count to be checked</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetTransactionCount</returns>
        ApiResponse<OutputGetTransactionCount> QanGetTransactionCountWithHttpInfo(string address, string blockNumber, int operationIndex = 0);
        /// <summary>
        /// Returns the receipt of a transaction by transaction hash.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of a transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetTransactionReceipt</returns>
        OutputGetTransactionReceipt QanGetTransactionReceipt(string hash, int operationIndex = 0);

        /// <summary>
        /// Returns the receipt of a transaction by transaction hash.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of a transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetTransactionReceipt</returns>
        ApiResponse<OutputGetTransactionReceipt> QanGetTransactionReceiptWithHttpInfo(string hash, int operationIndex = 0);
        /// <summary>
        /// Get the priority fee needed to be included in a block.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputMaxPriorityFeePerGas</returns>
        OutputMaxPriorityFeePerGas QanMaxPriorityFeePerGas(int operationIndex = 0);

        /// <summary>
        /// Get the priority fee needed to be included in a block.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputMaxPriorityFeePerGas</returns>
        ApiResponse<OutputMaxPriorityFeePerGas> QanMaxPriorityFeePerGasWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Creates a filter in the node, to notify when a new block arrives.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputNewBlockFilter</returns>
        OutputNewBlockFilter QanNewBlockFilter(int operationIndex = 0);

        /// <summary>
        /// Creates a filter in the node, to notify when a new block arrives.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputNewBlockFilter</returns>
        ApiResponse<OutputNewBlockFilter> QanNewBlockFilterWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Creates a filter object, based on filter options, to notify when the state changes (logs).
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputNewFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputNewFilter</returns>
        OutputNewFilter QanNewFilter(InputNewFilter inputNewFilter, int operationIndex = 0);

        /// <summary>
        /// Creates a filter object, based on filter options, to notify when the state changes (logs).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputNewFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputNewFilter</returns>
        ApiResponse<OutputNewFilter> QanNewFilterWithHttpInfo(InputNewFilter inputNewFilter, int operationIndex = 0);
        /// <summary>
        /// Creates a filter in the node to notify when new pending transactions arrive.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputNewPendingTransactionFilter</returns>
        OutputNewPendingTransactionFilter QanNewPendingTransactionFilter(int operationIndex = 0);

        /// <summary>
        /// Creates a filter in the node to notify when new pending transactions arrive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputNewPendingTransactionFilter</returns>
        ApiResponse<OutputNewPendingTransactionFilter> QanNewPendingTransactionFilterWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Creates new message call transaction or a contract creation for signed transactions.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputSendRawTransaction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputSendRawTransaction</returns>
        OutputSendRawTransaction QanSendRawTransaction(InputSendRawTransaction inputSendRawTransaction, int operationIndex = 0);

        /// <summary>
        /// Creates new message call transaction or a contract creation for signed transactions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputSendRawTransaction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputSendRawTransaction</returns>
        ApiResponse<OutputSendRawTransaction> QanSendRawTransactionWithHttpInfo(InputSendRawTransaction inputSendRawTransaction, int operationIndex = 0);
        /// <summary>
        /// Returns an object with the sync status of the node if the node is out-of-sync and is syncing. Returns null when the node is already in sync.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputSyncing</returns>
        OutputSyncing QanSyncing(int operationIndex = 0);

        /// <summary>
        /// Returns an object with the sync status of the node if the node is out-of-sync and is syncing. Returns null when the node is already in sync.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputSyncing</returns>
        ApiResponse<OutputSyncing> QanSyncingWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Uninstalls a filter with the given filter id.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">The filter ID that needs to be uninstalled. It should always be called when watch is no longer needed. Additionally, Filters timeout when they aren&#39;t requested with getFilterChanges for a period of time</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputUninstallFilter</returns>
        OutputUninstallFilter QanUninstallFilter(string filterId, int operationIndex = 0);

        /// <summary>
        /// Uninstalls a filter with the given filter id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">The filter ID that needs to be uninstalled. It should always be called when watch is no longer needed. Additionally, Filters timeout when they aren&#39;t requested with getFilterChanges for a period of time</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputUninstallFilter</returns>
        ApiResponse<OutputUninstallFilter> QanUninstallFilterWithHttpInfo(string filterId, int operationIndex = 0);
        /// <summary>
        /// Returns the xlink validity time of the account of given address.
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputXlinkValid</returns>
        OutputXlinkValid QanXlinkValid(string address, int operationIndex = 0);

        /// <summary>
        /// Returns the xlink validity time of the account of given address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputXlinkValid</returns>
        ApiResponse<OutputXlinkValid> QanXlinkValidWithHttpInfo(string address, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQANApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the latest block number of the blockchain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputBlockNumber</returns>
        System.Threading.Tasks.Task<OutputBlockNumber> QanBlockNumberAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns the latest block number of the blockchain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputBlockNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputBlockNumber>> QanBlockNumberWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Executes a new message call immediately without creating a transaction on the block chain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCall"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCall</returns>
        System.Threading.Tasks.Task<OutputCall> QanCallAsync(InputCall inputCall, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Executes a new message call immediately without creating a transaction on the block chain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCall"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCall)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputCall>> QanCallWithHttpInfoAsync(InputCall inputCall, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns the current network/chain ID, used to sign replay-protected transaction introduced in EIP-155.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputChainId</returns>
        System.Threading.Tasks.Task<OutputChainId> QanChainIdAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns the current network/chain ID, used to sign replay-protected transaction introduced in EIP-155.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputChainId)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputChainId>> QanChainIdWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns an estimation of gas for a given transaction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEstimateGas"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputEstimateGas</returns>
        System.Threading.Tasks.Task<OutputEstimateGas> QanEstimateGasAsync(InputEstimateGas inputEstimateGas, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns an estimation of gas for a given transaction.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEstimateGas"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputEstimateGas)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputEstimateGas>> QanEstimateGasWithHttpInfoAsync(InputEstimateGas inputEstimateGas, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns the collection of historical gas information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFeeHistory"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputFeeHistory</returns>
        System.Threading.Tasks.Task<OutputFeeHistory> QanFeeHistoryAsync(InputFeeHistory inputFeeHistory, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns the collection of historical gas information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFeeHistory"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputFeeHistory)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputFeeHistory>> QanFeeHistoryWithHttpInfoAsync(InputFeeHistory inputFeeHistory, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns the current gas price on the network in wei.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGasPrice</returns>
        System.Threading.Tasks.Task<OutputGasPrice> QanGasPriceAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns the current gas price on the network in wei.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGasPrice)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGasPrice>> QanGasPriceWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns the balance of the account of given address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">A 20 bytes long hexadecimal value representing an address</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending (optional, default to &quot;latest&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetBalance</returns>
        System.Threading.Tasks.Task<OutputGetBalance> QanGetBalanceAsync(string address, string? blockNumber = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns the balance of the account of given address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">A 20 bytes long hexadecimal value representing an address</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending (optional, default to &quot;latest&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetBalance)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetBalance>> QanGetBalanceWithHttpInfoAsync(string address, string? blockNumber = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns information of the block matching the given block hash.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash (32 bytes) of the block</param>
        /// <param name="transactionDetailFlag">The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetBlockByHash</returns>
        System.Threading.Tasks.Task<OutputGetBlockByHash> QanGetBlockByHashAsync(string hash, bool transactionDetailFlag, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns information of the block matching the given block hash.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash (32 bytes) of the block</param>
        /// <param name="transactionDetailFlag">The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetBlockByHash)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetBlockByHash>> QanGetBlockByHashWithHttpInfoAsync(string hash, bool transactionDetailFlag, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns information of the block matching the given block number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="transactionDetailFlag">The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetBlockByNumber</returns>
        System.Threading.Tasks.Task<OutputGetBlockByNumber> QanGetBlockByNumberAsync(string blockNumber, bool transactionDetailFlag, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns information of the block matching the given block number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="transactionDetailFlag">The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetBlockByNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetBlockByNumber>> QanGetBlockByNumberWithHttpInfoAsync(string blockNumber, bool transactionDetailFlag, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns all transaction receipts for a given block.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetBlockReceipts</returns>
        System.Threading.Tasks.Task<OutputGetBlockReceipts> QanGetBlockReceiptsAsync(string blockNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns all transaction receipts for a given block.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetBlockReceipts)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetBlockReceipts>> QanGetBlockReceiptsWithHttpInfoAsync(string blockNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns the number of transactions for the block matching the given block hash.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of the block</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetBlockTransactionCountByHash</returns>
        System.Threading.Tasks.Task<OutputGetBlockTransactionCountByHash> QanGetBlockTransactionCountByHashAsync(string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns the number of transactions for the block matching the given block hash.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of the block</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetBlockTransactionCountByHash)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetBlockTransactionCountByHash>> QanGetBlockTransactionCountByHashWithHttpInfoAsync(string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns the number of transactions for the block matching the given block number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetBlockTransactionCountByNumber</returns>
        System.Threading.Tasks.Task<OutputGetBlockTransactionCountByNumber> QanGetBlockTransactionCountByNumberAsync(string blockNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns the number of transactions for the block matching the given block number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetBlockTransactionCountByNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetBlockTransactionCountByNumber>> QanGetBlockTransactionCountByNumberWithHttpInfoAsync(string blockNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns the compiled bytecode of a smart contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the smart contract from which the bytecode will be obtained</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending (optional, default to &quot;latest&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetCode</returns>
        System.Threading.Tasks.Task<OutputGetCode> QanGetCodeAsync(string address, string? blockNumber = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns the compiled bytecode of a smart contract.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the smart contract from which the bytecode will be obtained</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending (optional, default to &quot;latest&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetCode>> QanGetCodeWithHttpInfoAsync(string address, string? blockNumber = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Polling method for a filter, which returns an array of events that have occurred since the last poll.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">The filter id that is returned from getFilterChangesnewFilter, getFilterChangesnewBlockFilter or getFilterChangesnewPendingTransactionFilter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetFilterChanges</returns>
        System.Threading.Tasks.Task<OutputGetFilterChanges> QanGetFilterChangesAsync(string filterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Polling method for a filter, which returns an array of events that have occurred since the last poll.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">The filter id that is returned from getFilterChangesnewFilter, getFilterChangesnewBlockFilter or getFilterChangesnewPendingTransactionFilter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetFilterChanges)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetFilterChanges>> QanGetFilterChangesWithHttpInfoAsync(string filterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns an array of all logs matching filter with given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The filter ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetFilterLogs</returns>
        System.Threading.Tasks.Task<OutputGetFilterLogs> QanGetFilterLogsAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns an array of all logs matching filter with given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The filter ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetFilterLogs)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetFilterLogs>> QanGetFilterLogsWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns an array of all logs matching a given filter object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetLogs"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetLogs</returns>
        System.Threading.Tasks.Task<OutputGetLogs> QanGetLogsAsync(InputGetLogs inputGetLogs, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns an array of all logs matching a given filter object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetLogs"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetLogs)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetLogs>> QanGetLogsWithHttpInfoAsync(InputGetLogs inputGetLogs, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns the account and storage values of the specified account including the Merkle-proof.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetProof"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetProof</returns>
        System.Threading.Tasks.Task<OutputGetProof> QanGetProofAsync(InputGetProof inputGetProof, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns the account and storage values of the specified account including the Merkle-proof.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetProof"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetProof)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetProof>> QanGetProofWithHttpInfoAsync(InputGetProof inputGetProof, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns the value from a storage position at a given address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetStorageAt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetStorageAt</returns>
        System.Threading.Tasks.Task<OutputGetStorageAt> QanGetStorageAtAsync(InputGetStorageAt inputGetStorageAt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns the value from a storage position at a given address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetStorageAt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetStorageAt)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetStorageAt>> QanGetStorageAtWithHttpInfoAsync(InputGetStorageAt inputGetStorageAt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns information about a transaction given a blockhash and transaction index position.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHash"></param>
        /// <param name="index">An integer of the transaction index position</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetTransactionByBlockHashAndIndex</returns>
        System.Threading.Tasks.Task<OutputGetTransactionByBlockHashAndIndex> QanGetTransactionByBlockHashAndIndexAsync(string blockHash, string index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns information about a transaction given a blockhash and transaction index position.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHash"></param>
        /// <param name="index">An integer of the transaction index position</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetTransactionByBlockHashAndIndex)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetTransactionByBlockHashAndIndex>> QanGetTransactionByBlockHashAndIndexWithHttpInfoAsync(string blockHash, string index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns information about a transaction given a block number and transaction index position.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="index">An integer of the transaction index position</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetTransactionByBlockNumberAndIndex</returns>
        System.Threading.Tasks.Task<OutputGetTransactionByBlockNumberAndIndex> QanGetTransactionByBlockNumberAndIndexAsync(string blockNumber, string index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns information about a transaction given a block number and transaction index position.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="index">An integer of the transaction index position</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetTransactionByBlockNumberAndIndex)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetTransactionByBlockNumberAndIndex>> QanGetTransactionByBlockNumberAndIndexWithHttpInfoAsync(string blockNumber, string index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns the information about a transaction from a transaction hash.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of a transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetTransactionByHash</returns>
        System.Threading.Tasks.Task<OutputGetTransactionByHash> QanGetTransactionByHashAsync(string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns the information about a transaction from a transaction hash.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of a transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetTransactionByHash)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetTransactionByHash>> QanGetTransactionByHashWithHttpInfoAsync(string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns the number of transactions sent from an address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address from which the transaction count to be checked</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetTransactionCount</returns>
        System.Threading.Tasks.Task<OutputGetTransactionCount> QanGetTransactionCountAsync(string address, string blockNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns the number of transactions sent from an address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address from which the transaction count to be checked</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetTransactionCount)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetTransactionCount>> QanGetTransactionCountWithHttpInfoAsync(string address, string blockNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns the receipt of a transaction by transaction hash.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of a transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetTransactionReceipt</returns>
        System.Threading.Tasks.Task<OutputGetTransactionReceipt> QanGetTransactionReceiptAsync(string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns the receipt of a transaction by transaction hash.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of a transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetTransactionReceipt)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputGetTransactionReceipt>> QanGetTransactionReceiptWithHttpInfoAsync(string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get the priority fee needed to be included in a block.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputMaxPriorityFeePerGas</returns>
        System.Threading.Tasks.Task<OutputMaxPriorityFeePerGas> QanMaxPriorityFeePerGasAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get the priority fee needed to be included in a block.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputMaxPriorityFeePerGas)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputMaxPriorityFeePerGas>> QanMaxPriorityFeePerGasWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates a filter in the node, to notify when a new block arrives.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputNewBlockFilter</returns>
        System.Threading.Tasks.Task<OutputNewBlockFilter> QanNewBlockFilterAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a filter in the node, to notify when a new block arrives.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputNewBlockFilter)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNewBlockFilter>> QanNewBlockFilterWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates a filter object, based on filter options, to notify when the state changes (logs).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputNewFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputNewFilter</returns>
        System.Threading.Tasks.Task<OutputNewFilter> QanNewFilterAsync(InputNewFilter inputNewFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a filter object, based on filter options, to notify when the state changes (logs).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputNewFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputNewFilter)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNewFilter>> QanNewFilterWithHttpInfoAsync(InputNewFilter inputNewFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates a filter in the node to notify when new pending transactions arrive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputNewPendingTransactionFilter</returns>
        System.Threading.Tasks.Task<OutputNewPendingTransactionFilter> QanNewPendingTransactionFilterAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a filter in the node to notify when new pending transactions arrive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputNewPendingTransactionFilter)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNewPendingTransactionFilter>> QanNewPendingTransactionFilterWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates new message call transaction or a contract creation for signed transactions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputSendRawTransaction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputSendRawTransaction</returns>
        System.Threading.Tasks.Task<OutputSendRawTransaction> QanSendRawTransactionAsync(InputSendRawTransaction inputSendRawTransaction, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates new message call transaction or a contract creation for signed transactions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputSendRawTransaction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputSendRawTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputSendRawTransaction>> QanSendRawTransactionWithHttpInfoAsync(InputSendRawTransaction inputSendRawTransaction, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns an object with the sync status of the node if the node is out-of-sync and is syncing. Returns null when the node is already in sync.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputSyncing</returns>
        System.Threading.Tasks.Task<OutputSyncing> QanSyncingAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns an object with the sync status of the node if the node is out-of-sync and is syncing. Returns null when the node is already in sync.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputSyncing)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputSyncing>> QanSyncingWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Uninstalls a filter with the given filter id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">The filter ID that needs to be uninstalled. It should always be called when watch is no longer needed. Additionally, Filters timeout when they aren&#39;t requested with getFilterChanges for a period of time</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputUninstallFilter</returns>
        System.Threading.Tasks.Task<OutputUninstallFilter> QanUninstallFilterAsync(string filterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Uninstalls a filter with the given filter id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">The filter ID that needs to be uninstalled. It should always be called when watch is no longer needed. Additionally, Filters timeout when they aren&#39;t requested with getFilterChanges for a period of time</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputUninstallFilter)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputUninstallFilter>> QanUninstallFilterWithHttpInfoAsync(string filterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Returns the xlink validity time of the account of given address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputXlinkValid</returns>
        System.Threading.Tasks.Task<OutputXlinkValid> QanXlinkValidAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Returns the xlink validity time of the account of given address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputXlinkValid)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputXlinkValid>> QanXlinkValidWithHttpInfoAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQANApi : IQANApiSync, IQANApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QANApi : IQANApi
    {
        private qan.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QANApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QANApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QANApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QANApi(string basePath)
        {
            this.Configuration = qan.Client.Configuration.MergeConfigurations(
                qan.Client.GlobalConfiguration.Instance,
                new qan.Client.Configuration { BasePath = basePath }
            );
            this.Client = new qan.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new qan.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = qan.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QANApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QANApi(qan.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = qan.Client.Configuration.MergeConfigurations(
                qan.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new qan.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new qan.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = qan.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QANApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public QANApi(qan.Client.ISynchronousClient client, qan.Client.IAsynchronousClient asyncClient, qan.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = qan.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public qan.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public qan.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public qan.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public qan.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the latest block number of the blockchain. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputBlockNumber</returns>
        public OutputBlockNumber QanBlockNumber(int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputBlockNumber> localVarResponse = QanBlockNumberWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the latest block number of the blockchain. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputBlockNumber</returns>
        public qan.Client.ApiResponse<OutputBlockNumber> QanBlockNumberWithHttpInfo(int operationIndex = 0)
        {
            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QANApi.QanBlockNumber";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputBlockNumber>("/blockNumber/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanBlockNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the latest block number of the blockchain. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputBlockNumber</returns>
        public async System.Threading.Tasks.Task<OutputBlockNumber> QanBlockNumberAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputBlockNumber> localVarResponse = await QanBlockNumberWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the latest block number of the blockchain. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputBlockNumber)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputBlockNumber>> QanBlockNumberWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QANApi.QanBlockNumber";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputBlockNumber>("/blockNumber/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanBlockNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Executes a new message call immediately without creating a transaction on the block chain. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCall"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputCall</returns>
        public OutputCall QanCall(InputCall inputCall, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputCall> localVarResponse = QanCallWithHttpInfo(inputCall);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Executes a new message call immediately without creating a transaction on the block chain. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCall"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputCall</returns>
        public qan.Client.ApiResponse<OutputCall> QanCallWithHttpInfo(InputCall inputCall, int operationIndex = 0)
        {
            // verify the required parameter 'inputCall' is set
            if (inputCall == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'inputCall' when calling QANApi->QanCall");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputCall;

            localVarRequestOptions.Operation = "QANApi.QanCall";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputCall>("/call/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanCall", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Executes a new message call immediately without creating a transaction on the block chain. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCall"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCall</returns>
        public async System.Threading.Tasks.Task<OutputCall> QanCallAsync(InputCall inputCall, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputCall> localVarResponse = await QanCallWithHttpInfoAsync(inputCall, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Executes a new message call immediately without creating a transaction on the block chain. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCall"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCall)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputCall>> QanCallWithHttpInfoAsync(InputCall inputCall, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputCall' is set
            if (inputCall == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'inputCall' when calling QANApi->QanCall");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputCall;

            localVarRequestOptions.Operation = "QANApi.QanCall";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputCall>("/call/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanCall", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the current network/chain ID, used to sign replay-protected transaction introduced in EIP-155. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputChainId</returns>
        public OutputChainId QanChainId(int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputChainId> localVarResponse = QanChainIdWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the current network/chain ID, used to sign replay-protected transaction introduced in EIP-155. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputChainId</returns>
        public qan.Client.ApiResponse<OutputChainId> QanChainIdWithHttpInfo(int operationIndex = 0)
        {
            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QANApi.QanChainId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputChainId>("/chainId/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanChainId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the current network/chain ID, used to sign replay-protected transaction introduced in EIP-155. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputChainId</returns>
        public async System.Threading.Tasks.Task<OutputChainId> QanChainIdAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputChainId> localVarResponse = await QanChainIdWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the current network/chain ID, used to sign replay-protected transaction introduced in EIP-155. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputChainId)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputChainId>> QanChainIdWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QANApi.QanChainId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputChainId>("/chainId/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanChainId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns an estimation of gas for a given transaction. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEstimateGas"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputEstimateGas</returns>
        public OutputEstimateGas QanEstimateGas(InputEstimateGas inputEstimateGas, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputEstimateGas> localVarResponse = QanEstimateGasWithHttpInfo(inputEstimateGas);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an estimation of gas for a given transaction. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEstimateGas"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputEstimateGas</returns>
        public qan.Client.ApiResponse<OutputEstimateGas> QanEstimateGasWithHttpInfo(InputEstimateGas inputEstimateGas, int operationIndex = 0)
        {
            // verify the required parameter 'inputEstimateGas' is set
            if (inputEstimateGas == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'inputEstimateGas' when calling QANApi->QanEstimateGas");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputEstimateGas;

            localVarRequestOptions.Operation = "QANApi.QanEstimateGas";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputEstimateGas>("/estimateGas/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanEstimateGas", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns an estimation of gas for a given transaction. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEstimateGas"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputEstimateGas</returns>
        public async System.Threading.Tasks.Task<OutputEstimateGas> QanEstimateGasAsync(InputEstimateGas inputEstimateGas, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputEstimateGas> localVarResponse = await QanEstimateGasWithHttpInfoAsync(inputEstimateGas, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an estimation of gas for a given transaction. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEstimateGas"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputEstimateGas)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputEstimateGas>> QanEstimateGasWithHttpInfoAsync(InputEstimateGas inputEstimateGas, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputEstimateGas' is set
            if (inputEstimateGas == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'inputEstimateGas' when calling QANApi->QanEstimateGas");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputEstimateGas;

            localVarRequestOptions.Operation = "QANApi.QanEstimateGas";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputEstimateGas>("/estimateGas/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanEstimateGas", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the collection of historical gas information. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFeeHistory"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputFeeHistory</returns>
        public OutputFeeHistory QanFeeHistory(InputFeeHistory inputFeeHistory, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputFeeHistory> localVarResponse = QanFeeHistoryWithHttpInfo(inputFeeHistory);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the collection of historical gas information. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFeeHistory"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputFeeHistory</returns>
        public qan.Client.ApiResponse<OutputFeeHistory> QanFeeHistoryWithHttpInfo(InputFeeHistory inputFeeHistory, int operationIndex = 0)
        {
            // verify the required parameter 'inputFeeHistory' is set
            if (inputFeeHistory == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'inputFeeHistory' when calling QANApi->QanFeeHistory");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputFeeHistory;

            localVarRequestOptions.Operation = "QANApi.QanFeeHistory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputFeeHistory>("/feeHistory/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanFeeHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the collection of historical gas information. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFeeHistory"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputFeeHistory</returns>
        public async System.Threading.Tasks.Task<OutputFeeHistory> QanFeeHistoryAsync(InputFeeHistory inputFeeHistory, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputFeeHistory> localVarResponse = await QanFeeHistoryWithHttpInfoAsync(inputFeeHistory, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the collection of historical gas information. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFeeHistory"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputFeeHistory)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputFeeHistory>> QanFeeHistoryWithHttpInfoAsync(InputFeeHistory inputFeeHistory, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputFeeHistory' is set
            if (inputFeeHistory == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'inputFeeHistory' when calling QANApi->QanFeeHistory");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputFeeHistory;

            localVarRequestOptions.Operation = "QANApi.QanFeeHistory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputFeeHistory>("/feeHistory/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanFeeHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the current gas price on the network in wei. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGasPrice</returns>
        public OutputGasPrice QanGasPrice(int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGasPrice> localVarResponse = QanGasPriceWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the current gas price on the network in wei. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGasPrice</returns>
        public qan.Client.ApiResponse<OutputGasPrice> QanGasPriceWithHttpInfo(int operationIndex = 0)
        {
            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QANApi.QanGasPrice";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputGasPrice>("/gasPrice/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGasPrice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the current gas price on the network in wei. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGasPrice</returns>
        public async System.Threading.Tasks.Task<OutputGasPrice> QanGasPriceAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGasPrice> localVarResponse = await QanGasPriceWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the current gas price on the network in wei. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGasPrice)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGasPrice>> QanGasPriceWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QANApi.QanGasPrice";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputGasPrice>("/gasPrice/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGasPrice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the balance of the account of given address. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">A 20 bytes long hexadecimal value representing an address</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending (optional, default to &quot;latest&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetBalance</returns>
        public OutputGetBalance QanGetBalance(string address, string? blockNumber = default(string?), int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetBalance> localVarResponse = QanGetBalanceWithHttpInfo(address, blockNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the balance of the account of given address. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">A 20 bytes long hexadecimal value representing an address</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending (optional, default to &quot;latest&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetBalance</returns>
        public qan.Client.ApiResponse<OutputGetBalance> QanGetBalanceWithHttpInfo(string address, string? blockNumber = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'address' when calling QANApi->QanGetBalance");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Address", qan.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (blockNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(qan.Client.ClientUtils.ParameterToMultiMap("", "BlockNumber", blockNumber));
            }

            localVarRequestOptions.Operation = "QANApi.QanGetBalance";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputGetBalance>("/getBalance/{Address}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the balance of the account of given address. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">A 20 bytes long hexadecimal value representing an address</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending (optional, default to &quot;latest&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetBalance</returns>
        public async System.Threading.Tasks.Task<OutputGetBalance> QanGetBalanceAsync(string address, string? blockNumber = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetBalance> localVarResponse = await QanGetBalanceWithHttpInfoAsync(address, blockNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the balance of the account of given address. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">A 20 bytes long hexadecimal value representing an address</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending (optional, default to &quot;latest&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetBalance)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetBalance>> QanGetBalanceWithHttpInfoAsync(string address, string? blockNumber = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'address' when calling QANApi->QanGetBalance");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Address", qan.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (blockNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(qan.Client.ClientUtils.ParameterToMultiMap("", "BlockNumber", blockNumber));
            }

            localVarRequestOptions.Operation = "QANApi.QanGetBalance";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputGetBalance>("/getBalance/{Address}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information of the block matching the given block hash. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash (32 bytes) of the block</param>
        /// <param name="transactionDetailFlag">The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetBlockByHash</returns>
        public OutputGetBlockByHash QanGetBlockByHash(string hash, bool transactionDetailFlag, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetBlockByHash> localVarResponse = QanGetBlockByHashWithHttpInfo(hash, transactionDetailFlag);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information of the block matching the given block hash. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash (32 bytes) of the block</param>
        /// <param name="transactionDetailFlag">The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetBlockByHash</returns>
        public qan.Client.ApiResponse<OutputGetBlockByHash> QanGetBlockByHashWithHttpInfo(string hash, bool transactionDetailFlag, int operationIndex = 0)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'hash' when calling QANApi->QanGetBlockByHash");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Hash", qan.Client.ClientUtils.ParameterToString(hash)); // path parameter
            localVarRequestOptions.PathParameters.Add("TransactionDetailFlag", qan.Client.ClientUtils.ParameterToString(transactionDetailFlag)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetBlockByHash";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputGetBlockByHash>("/getBlockByHash/{Hash}/{TransactionDetailFlag}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetBlockByHash", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information of the block matching the given block hash. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash (32 bytes) of the block</param>
        /// <param name="transactionDetailFlag">The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetBlockByHash</returns>
        public async System.Threading.Tasks.Task<OutputGetBlockByHash> QanGetBlockByHashAsync(string hash, bool transactionDetailFlag, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetBlockByHash> localVarResponse = await QanGetBlockByHashWithHttpInfoAsync(hash, transactionDetailFlag, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information of the block matching the given block hash. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash (32 bytes) of the block</param>
        /// <param name="transactionDetailFlag">The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetBlockByHash)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetBlockByHash>> QanGetBlockByHashWithHttpInfoAsync(string hash, bool transactionDetailFlag, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'hash' when calling QANApi->QanGetBlockByHash");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Hash", qan.Client.ClientUtils.ParameterToString(hash)); // path parameter
            localVarRequestOptions.PathParameters.Add("TransactionDetailFlag", qan.Client.ClientUtils.ParameterToString(transactionDetailFlag)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetBlockByHash";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputGetBlockByHash>("/getBlockByHash/{Hash}/{TransactionDetailFlag}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetBlockByHash", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information of the block matching the given block number. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="transactionDetailFlag">The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetBlockByNumber</returns>
        public OutputGetBlockByNumber QanGetBlockByNumber(string blockNumber, bool transactionDetailFlag, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetBlockByNumber> localVarResponse = QanGetBlockByNumberWithHttpInfo(blockNumber, transactionDetailFlag);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information of the block matching the given block number. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="transactionDetailFlag">The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetBlockByNumber</returns>
        public qan.Client.ApiResponse<OutputGetBlockByNumber> QanGetBlockByNumberWithHttpInfo(string blockNumber, bool transactionDetailFlag, int operationIndex = 0)
        {
            // verify the required parameter 'blockNumber' is set
            if (blockNumber == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'blockNumber' when calling QANApi->QanGetBlockByNumber");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BlockNumber", qan.Client.ClientUtils.ParameterToString(blockNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("TransactionDetailFlag", qan.Client.ClientUtils.ParameterToString(transactionDetailFlag)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetBlockByNumber";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputGetBlockByNumber>("/getBlockByNumber/{BlockNumber}/{TransactionDetailFlag}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetBlockByNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information of the block matching the given block number. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="transactionDetailFlag">The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetBlockByNumber</returns>
        public async System.Threading.Tasks.Task<OutputGetBlockByNumber> QanGetBlockByNumberAsync(string blockNumber, bool transactionDetailFlag, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetBlockByNumber> localVarResponse = await QanGetBlockByNumberWithHttpInfoAsync(blockNumber, transactionDetailFlag, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information of the block matching the given block number. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="transactionDetailFlag">The method returns the full transaction objects when this value is true otherwise, it returns only the hashes of the transactions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetBlockByNumber)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetBlockByNumber>> QanGetBlockByNumberWithHttpInfoAsync(string blockNumber, bool transactionDetailFlag, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockNumber' is set
            if (blockNumber == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'blockNumber' when calling QANApi->QanGetBlockByNumber");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BlockNumber", qan.Client.ClientUtils.ParameterToString(blockNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("TransactionDetailFlag", qan.Client.ClientUtils.ParameterToString(transactionDetailFlag)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetBlockByNumber";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputGetBlockByNumber>("/getBlockByNumber/{BlockNumber}/{TransactionDetailFlag}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetBlockByNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all transaction receipts for a given block. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetBlockReceipts</returns>
        public OutputGetBlockReceipts QanGetBlockReceipts(string blockNumber, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetBlockReceipts> localVarResponse = QanGetBlockReceiptsWithHttpInfo(blockNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all transaction receipts for a given block. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetBlockReceipts</returns>
        public qan.Client.ApiResponse<OutputGetBlockReceipts> QanGetBlockReceiptsWithHttpInfo(string blockNumber, int operationIndex = 0)
        {
            // verify the required parameter 'blockNumber' is set
            if (blockNumber == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'blockNumber' when calling QANApi->QanGetBlockReceipts");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BlockNumber", qan.Client.ClientUtils.ParameterToString(blockNumber)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetBlockReceipts";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputGetBlockReceipts>("/getBlockReceipts/{BlockNumber}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetBlockReceipts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns all transaction receipts for a given block. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetBlockReceipts</returns>
        public async System.Threading.Tasks.Task<OutputGetBlockReceipts> QanGetBlockReceiptsAsync(string blockNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetBlockReceipts> localVarResponse = await QanGetBlockReceiptsWithHttpInfoAsync(blockNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all transaction receipts for a given block. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetBlockReceipts)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetBlockReceipts>> QanGetBlockReceiptsWithHttpInfoAsync(string blockNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockNumber' is set
            if (blockNumber == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'blockNumber' when calling QANApi->QanGetBlockReceipts");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BlockNumber", qan.Client.ClientUtils.ParameterToString(blockNumber)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetBlockReceipts";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputGetBlockReceipts>("/getBlockReceipts/{BlockNumber}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetBlockReceipts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the number of transactions for the block matching the given block hash. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of the block</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetBlockTransactionCountByHash</returns>
        public OutputGetBlockTransactionCountByHash QanGetBlockTransactionCountByHash(string hash, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetBlockTransactionCountByHash> localVarResponse = QanGetBlockTransactionCountByHashWithHttpInfo(hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the number of transactions for the block matching the given block hash. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of the block</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetBlockTransactionCountByHash</returns>
        public qan.Client.ApiResponse<OutputGetBlockTransactionCountByHash> QanGetBlockTransactionCountByHashWithHttpInfo(string hash, int operationIndex = 0)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'hash' when calling QANApi->QanGetBlockTransactionCountByHash");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Hash", qan.Client.ClientUtils.ParameterToString(hash)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetBlockTransactionCountByHash";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputGetBlockTransactionCountByHash>("/getBlockTransactionCountByHash/{Hash}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetBlockTransactionCountByHash", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the number of transactions for the block matching the given block hash. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of the block</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetBlockTransactionCountByHash</returns>
        public async System.Threading.Tasks.Task<OutputGetBlockTransactionCountByHash> QanGetBlockTransactionCountByHashAsync(string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetBlockTransactionCountByHash> localVarResponse = await QanGetBlockTransactionCountByHashWithHttpInfoAsync(hash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the number of transactions for the block matching the given block hash. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of the block</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetBlockTransactionCountByHash)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetBlockTransactionCountByHash>> QanGetBlockTransactionCountByHashWithHttpInfoAsync(string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'hash' when calling QANApi->QanGetBlockTransactionCountByHash");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Hash", qan.Client.ClientUtils.ParameterToString(hash)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetBlockTransactionCountByHash";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputGetBlockTransactionCountByHash>("/getBlockTransactionCountByHash/{Hash}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetBlockTransactionCountByHash", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the number of transactions for the block matching the given block number. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetBlockTransactionCountByNumber</returns>
        public OutputGetBlockTransactionCountByNumber QanGetBlockTransactionCountByNumber(string blockNumber, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetBlockTransactionCountByNumber> localVarResponse = QanGetBlockTransactionCountByNumberWithHttpInfo(blockNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the number of transactions for the block matching the given block number. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetBlockTransactionCountByNumber</returns>
        public qan.Client.ApiResponse<OutputGetBlockTransactionCountByNumber> QanGetBlockTransactionCountByNumberWithHttpInfo(string blockNumber, int operationIndex = 0)
        {
            // verify the required parameter 'blockNumber' is set
            if (blockNumber == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'blockNumber' when calling QANApi->QanGetBlockTransactionCountByNumber");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BlockNumber", qan.Client.ClientUtils.ParameterToString(blockNumber)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetBlockTransactionCountByNumber";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputGetBlockTransactionCountByNumber>("/getBlockTransactionCountByNumber/{BlockNumber}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetBlockTransactionCountByNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the number of transactions for the block matching the given block number. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetBlockTransactionCountByNumber</returns>
        public async System.Threading.Tasks.Task<OutputGetBlockTransactionCountByNumber> QanGetBlockTransactionCountByNumberAsync(string blockNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetBlockTransactionCountByNumber> localVarResponse = await QanGetBlockTransactionCountByNumberWithHttpInfoAsync(blockNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the number of transactions for the block matching the given block number. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetBlockTransactionCountByNumber)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetBlockTransactionCountByNumber>> QanGetBlockTransactionCountByNumberWithHttpInfoAsync(string blockNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockNumber' is set
            if (blockNumber == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'blockNumber' when calling QANApi->QanGetBlockTransactionCountByNumber");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("BlockNumber", qan.Client.ClientUtils.ParameterToString(blockNumber)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetBlockTransactionCountByNumber";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputGetBlockTransactionCountByNumber>("/getBlockTransactionCountByNumber/{BlockNumber}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetBlockTransactionCountByNumber", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the compiled bytecode of a smart contract. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the smart contract from which the bytecode will be obtained</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending (optional, default to &quot;latest&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetCode</returns>
        public OutputGetCode QanGetCode(string address, string? blockNumber = default(string?), int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetCode> localVarResponse = QanGetCodeWithHttpInfo(address, blockNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the compiled bytecode of a smart contract. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the smart contract from which the bytecode will be obtained</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending (optional, default to &quot;latest&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetCode</returns>
        public qan.Client.ApiResponse<OutputGetCode> QanGetCodeWithHttpInfo(string address, string? blockNumber = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'address' when calling QANApi->QanGetCode");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Address", qan.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (blockNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(qan.Client.ClientUtils.ParameterToMultiMap("", "BlockNumber", blockNumber));
            }

            localVarRequestOptions.Operation = "QANApi.QanGetCode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputGetCode>("/getCode/{Address}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the compiled bytecode of a smart contract. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the smart contract from which the bytecode will be obtained</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending (optional, default to &quot;latest&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetCode</returns>
        public async System.Threading.Tasks.Task<OutputGetCode> QanGetCodeAsync(string address, string? blockNumber = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetCode> localVarResponse = await QanGetCodeWithHttpInfoAsync(address, blockNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the compiled bytecode of a smart contract. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address of the smart contract from which the bytecode will be obtained</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending (optional, default to &quot;latest&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetCode)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetCode>> QanGetCodeWithHttpInfoAsync(string address, string? blockNumber = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'address' when calling QANApi->QanGetCode");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Address", qan.Client.ClientUtils.ParameterToString(address)); // path parameter
            if (blockNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(qan.Client.ClientUtils.ParameterToMultiMap("", "BlockNumber", blockNumber));
            }

            localVarRequestOptions.Operation = "QANApi.QanGetCode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputGetCode>("/getCode/{Address}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Polling method for a filter, which returns an array of events that have occurred since the last poll. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">The filter id that is returned from getFilterChangesnewFilter, getFilterChangesnewBlockFilter or getFilterChangesnewPendingTransactionFilter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetFilterChanges</returns>
        public OutputGetFilterChanges QanGetFilterChanges(string filterId, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetFilterChanges> localVarResponse = QanGetFilterChangesWithHttpInfo(filterId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Polling method for a filter, which returns an array of events that have occurred since the last poll. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">The filter id that is returned from getFilterChangesnewFilter, getFilterChangesnewBlockFilter or getFilterChangesnewPendingTransactionFilter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetFilterChanges</returns>
        public qan.Client.ApiResponse<OutputGetFilterChanges> QanGetFilterChangesWithHttpInfo(string filterId, int operationIndex = 0)
        {
            // verify the required parameter 'filterId' is set
            if (filterId == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'filterId' when calling QANApi->QanGetFilterChanges");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("FilterId", qan.Client.ClientUtils.ParameterToString(filterId)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetFilterChanges";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputGetFilterChanges>("/getFilterChanges/{FilterId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetFilterChanges", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Polling method for a filter, which returns an array of events that have occurred since the last poll. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">The filter id that is returned from getFilterChangesnewFilter, getFilterChangesnewBlockFilter or getFilterChangesnewPendingTransactionFilter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetFilterChanges</returns>
        public async System.Threading.Tasks.Task<OutputGetFilterChanges> QanGetFilterChangesAsync(string filterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetFilterChanges> localVarResponse = await QanGetFilterChangesWithHttpInfoAsync(filterId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Polling method for a filter, which returns an array of events that have occurred since the last poll. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">The filter id that is returned from getFilterChangesnewFilter, getFilterChangesnewBlockFilter or getFilterChangesnewPendingTransactionFilter</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetFilterChanges)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetFilterChanges>> QanGetFilterChangesWithHttpInfoAsync(string filterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'filterId' is set
            if (filterId == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'filterId' when calling QANApi->QanGetFilterChanges");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("FilterId", qan.Client.ClientUtils.ParameterToString(filterId)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetFilterChanges";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputGetFilterChanges>("/getFilterChanges/{FilterId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetFilterChanges", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns an array of all logs matching filter with given id. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The filter ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetFilterLogs</returns>
        public OutputGetFilterLogs QanGetFilterLogs(string id, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetFilterLogs> localVarResponse = QanGetFilterLogsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an array of all logs matching filter with given id. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The filter ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetFilterLogs</returns>
        public qan.Client.ApiResponse<OutputGetFilterLogs> QanGetFilterLogsWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'id' when calling QANApi->QanGetFilterLogs");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", qan.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetFilterLogs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputGetFilterLogs>("/getFilterLogs/{Id}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetFilterLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns an array of all logs matching filter with given id. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The filter ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetFilterLogs</returns>
        public async System.Threading.Tasks.Task<OutputGetFilterLogs> QanGetFilterLogsAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetFilterLogs> localVarResponse = await QanGetFilterLogsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an array of all logs matching filter with given id. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The filter ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetFilterLogs)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetFilterLogs>> QanGetFilterLogsWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'id' when calling QANApi->QanGetFilterLogs");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", qan.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetFilterLogs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputGetFilterLogs>("/getFilterLogs/{Id}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetFilterLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns an array of all logs matching a given filter object. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetLogs"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetLogs</returns>
        public OutputGetLogs QanGetLogs(InputGetLogs inputGetLogs, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetLogs> localVarResponse = QanGetLogsWithHttpInfo(inputGetLogs);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an array of all logs matching a given filter object. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetLogs"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetLogs</returns>
        public qan.Client.ApiResponse<OutputGetLogs> QanGetLogsWithHttpInfo(InputGetLogs inputGetLogs, int operationIndex = 0)
        {
            // verify the required parameter 'inputGetLogs' is set
            if (inputGetLogs == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'inputGetLogs' when calling QANApi->QanGetLogs");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputGetLogs;

            localVarRequestOptions.Operation = "QANApi.QanGetLogs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputGetLogs>("/getLogs/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns an array of all logs matching a given filter object. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetLogs"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetLogs</returns>
        public async System.Threading.Tasks.Task<OutputGetLogs> QanGetLogsAsync(InputGetLogs inputGetLogs, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetLogs> localVarResponse = await QanGetLogsWithHttpInfoAsync(inputGetLogs, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an array of all logs matching a given filter object. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetLogs"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetLogs)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetLogs>> QanGetLogsWithHttpInfoAsync(InputGetLogs inputGetLogs, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputGetLogs' is set
            if (inputGetLogs == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'inputGetLogs' when calling QANApi->QanGetLogs");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputGetLogs;

            localVarRequestOptions.Operation = "QANApi.QanGetLogs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputGetLogs>("/getLogs/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the account and storage values of the specified account including the Merkle-proof. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetProof"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetProof</returns>
        public OutputGetProof QanGetProof(InputGetProof inputGetProof, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetProof> localVarResponse = QanGetProofWithHttpInfo(inputGetProof);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the account and storage values of the specified account including the Merkle-proof. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetProof"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetProof</returns>
        public qan.Client.ApiResponse<OutputGetProof> QanGetProofWithHttpInfo(InputGetProof inputGetProof, int operationIndex = 0)
        {
            // verify the required parameter 'inputGetProof' is set
            if (inputGetProof == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'inputGetProof' when calling QANApi->QanGetProof");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputGetProof;

            localVarRequestOptions.Operation = "QANApi.QanGetProof";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputGetProof>("/getProof/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetProof", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the account and storage values of the specified account including the Merkle-proof. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetProof"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetProof</returns>
        public async System.Threading.Tasks.Task<OutputGetProof> QanGetProofAsync(InputGetProof inputGetProof, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetProof> localVarResponse = await QanGetProofWithHttpInfoAsync(inputGetProof, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the account and storage values of the specified account including the Merkle-proof. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetProof"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetProof)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetProof>> QanGetProofWithHttpInfoAsync(InputGetProof inputGetProof, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputGetProof' is set
            if (inputGetProof == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'inputGetProof' when calling QANApi->QanGetProof");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputGetProof;

            localVarRequestOptions.Operation = "QANApi.QanGetProof";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputGetProof>("/getProof/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetProof", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the value from a storage position at a given address. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetStorageAt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetStorageAt</returns>
        public OutputGetStorageAt QanGetStorageAt(InputGetStorageAt inputGetStorageAt, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetStorageAt> localVarResponse = QanGetStorageAtWithHttpInfo(inputGetStorageAt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the value from a storage position at a given address. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetStorageAt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetStorageAt</returns>
        public qan.Client.ApiResponse<OutputGetStorageAt> QanGetStorageAtWithHttpInfo(InputGetStorageAt inputGetStorageAt, int operationIndex = 0)
        {
            // verify the required parameter 'inputGetStorageAt' is set
            if (inputGetStorageAt == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'inputGetStorageAt' when calling QANApi->QanGetStorageAt");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputGetStorageAt;

            localVarRequestOptions.Operation = "QANApi.QanGetStorageAt";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputGetStorageAt>("/getStorageAt/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetStorageAt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the value from a storage position at a given address. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetStorageAt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetStorageAt</returns>
        public async System.Threading.Tasks.Task<OutputGetStorageAt> QanGetStorageAtAsync(InputGetStorageAt inputGetStorageAt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetStorageAt> localVarResponse = await QanGetStorageAtWithHttpInfoAsync(inputGetStorageAt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the value from a storage position at a given address. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputGetStorageAt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetStorageAt)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetStorageAt>> QanGetStorageAtWithHttpInfoAsync(InputGetStorageAt inputGetStorageAt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputGetStorageAt' is set
            if (inputGetStorageAt == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'inputGetStorageAt' when calling QANApi->QanGetStorageAt");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputGetStorageAt;

            localVarRequestOptions.Operation = "QANApi.QanGetStorageAt";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputGetStorageAt>("/getStorageAt/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetStorageAt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information about a transaction given a blockhash and transaction index position. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHash"></param>
        /// <param name="index">An integer of the transaction index position</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetTransactionByBlockHashAndIndex</returns>
        public OutputGetTransactionByBlockHashAndIndex QanGetTransactionByBlockHashAndIndex(string blockHash, string index, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetTransactionByBlockHashAndIndex> localVarResponse = QanGetTransactionByBlockHashAndIndexWithHttpInfo(blockHash, index);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about a transaction given a blockhash and transaction index position. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHash"></param>
        /// <param name="index">An integer of the transaction index position</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetTransactionByBlockHashAndIndex</returns>
        public qan.Client.ApiResponse<OutputGetTransactionByBlockHashAndIndex> QanGetTransactionByBlockHashAndIndexWithHttpInfo(string blockHash, string index, int operationIndex = 0)
        {
            // verify the required parameter 'blockHash' is set
            if (blockHash == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'blockHash' when calling QANApi->QanGetTransactionByBlockHashAndIndex");
            }

            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'index' when calling QANApi->QanGetTransactionByBlockHashAndIndex");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockHash", qan.Client.ClientUtils.ParameterToString(blockHash)); // path parameter
            localVarRequestOptions.PathParameters.Add("index", qan.Client.ClientUtils.ParameterToString(index)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetTransactionByBlockHashAndIndex";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputGetTransactionByBlockHashAndIndex>("/getTransactionByBlockHashAndIndex/{blockHash}/{index}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetTransactionByBlockHashAndIndex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information about a transaction given a blockhash and transaction index position. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHash"></param>
        /// <param name="index">An integer of the transaction index position</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetTransactionByBlockHashAndIndex</returns>
        public async System.Threading.Tasks.Task<OutputGetTransactionByBlockHashAndIndex> QanGetTransactionByBlockHashAndIndexAsync(string blockHash, string index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetTransactionByBlockHashAndIndex> localVarResponse = await QanGetTransactionByBlockHashAndIndexWithHttpInfoAsync(blockHash, index, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about a transaction given a blockhash and transaction index position. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockHash"></param>
        /// <param name="index">An integer of the transaction index position</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetTransactionByBlockHashAndIndex)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetTransactionByBlockHashAndIndex>> QanGetTransactionByBlockHashAndIndexWithHttpInfoAsync(string blockHash, string index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockHash' is set
            if (blockHash == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'blockHash' when calling QANApi->QanGetTransactionByBlockHashAndIndex");
            }

            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'index' when calling QANApi->QanGetTransactionByBlockHashAndIndex");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockHash", qan.Client.ClientUtils.ParameterToString(blockHash)); // path parameter
            localVarRequestOptions.PathParameters.Add("index", qan.Client.ClientUtils.ParameterToString(index)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetTransactionByBlockHashAndIndex";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputGetTransactionByBlockHashAndIndex>("/getTransactionByBlockHashAndIndex/{blockHash}/{index}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetTransactionByBlockHashAndIndex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information about a transaction given a block number and transaction index position. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="index">An integer of the transaction index position</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetTransactionByBlockNumberAndIndex</returns>
        public OutputGetTransactionByBlockNumberAndIndex QanGetTransactionByBlockNumberAndIndex(string blockNumber, string index, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetTransactionByBlockNumberAndIndex> localVarResponse = QanGetTransactionByBlockNumberAndIndexWithHttpInfo(blockNumber, index);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about a transaction given a block number and transaction index position. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="index">An integer of the transaction index position</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetTransactionByBlockNumberAndIndex</returns>
        public qan.Client.ApiResponse<OutputGetTransactionByBlockNumberAndIndex> QanGetTransactionByBlockNumberAndIndexWithHttpInfo(string blockNumber, string index, int operationIndex = 0)
        {
            // verify the required parameter 'blockNumber' is set
            if (blockNumber == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'blockNumber' when calling QANApi->QanGetTransactionByBlockNumberAndIndex");
            }

            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'index' when calling QANApi->QanGetTransactionByBlockNumberAndIndex");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockNumber", qan.Client.ClientUtils.ParameterToString(blockNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("index", qan.Client.ClientUtils.ParameterToString(index)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetTransactionByBlockNumberAndIndex";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputGetTransactionByBlockNumberAndIndex>("/getTransactionByBlockNumberAndIndex/{blockNumber}/{index}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetTransactionByBlockNumberAndIndex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information about a transaction given a block number and transaction index position. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="index">An integer of the transaction index position</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetTransactionByBlockNumberAndIndex</returns>
        public async System.Threading.Tasks.Task<OutputGetTransactionByBlockNumberAndIndex> QanGetTransactionByBlockNumberAndIndexAsync(string blockNumber, string index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetTransactionByBlockNumberAndIndex> localVarResponse = await QanGetTransactionByBlockNumberAndIndexWithHttpInfoAsync(blockNumber, index, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about a transaction given a block number and transaction index position. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="index">An integer of the transaction index position</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetTransactionByBlockNumberAndIndex)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetTransactionByBlockNumberAndIndex>> QanGetTransactionByBlockNumberAndIndexWithHttpInfoAsync(string blockNumber, string index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockNumber' is set
            if (blockNumber == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'blockNumber' when calling QANApi->QanGetTransactionByBlockNumberAndIndex");
            }

            // verify the required parameter 'index' is set
            if (index == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'index' when calling QANApi->QanGetTransactionByBlockNumberAndIndex");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("blockNumber", qan.Client.ClientUtils.ParameterToString(blockNumber)); // path parameter
            localVarRequestOptions.PathParameters.Add("index", qan.Client.ClientUtils.ParameterToString(index)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetTransactionByBlockNumberAndIndex";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputGetTransactionByBlockNumberAndIndex>("/getTransactionByBlockNumberAndIndex/{blockNumber}/{index}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetTransactionByBlockNumberAndIndex", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the information about a transaction from a transaction hash. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of a transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetTransactionByHash</returns>
        public OutputGetTransactionByHash QanGetTransactionByHash(string hash, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetTransactionByHash> localVarResponse = QanGetTransactionByHashWithHttpInfo(hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the information about a transaction from a transaction hash. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of a transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetTransactionByHash</returns>
        public qan.Client.ApiResponse<OutputGetTransactionByHash> QanGetTransactionByHashWithHttpInfo(string hash, int operationIndex = 0)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'hash' when calling QANApi->QanGetTransactionByHash");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("hash", qan.Client.ClientUtils.ParameterToString(hash)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetTransactionByHash";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputGetTransactionByHash>("/getTransactionByHash/{hash}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetTransactionByHash", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the information about a transaction from a transaction hash. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of a transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetTransactionByHash</returns>
        public async System.Threading.Tasks.Task<OutputGetTransactionByHash> QanGetTransactionByHashAsync(string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetTransactionByHash> localVarResponse = await QanGetTransactionByHashWithHttpInfoAsync(hash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the information about a transaction from a transaction hash. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of a transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetTransactionByHash)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetTransactionByHash>> QanGetTransactionByHashWithHttpInfoAsync(string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'hash' when calling QANApi->QanGetTransactionByHash");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("hash", qan.Client.ClientUtils.ParameterToString(hash)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetTransactionByHash";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputGetTransactionByHash>("/getTransactionByHash/{hash}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetTransactionByHash", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the number of transactions sent from an address. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address from which the transaction count to be checked</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetTransactionCount</returns>
        public OutputGetTransactionCount QanGetTransactionCount(string address, string blockNumber, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetTransactionCount> localVarResponse = QanGetTransactionCountWithHttpInfo(address, blockNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the number of transactions sent from an address. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address from which the transaction count to be checked</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetTransactionCount</returns>
        public qan.Client.ApiResponse<OutputGetTransactionCount> QanGetTransactionCountWithHttpInfo(string address, string blockNumber, int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'address' when calling QANApi->QanGetTransactionCount");
            }

            // verify the required parameter 'blockNumber' is set
            if (blockNumber == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'blockNumber' when calling QANApi->QanGetTransactionCount");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Address", qan.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("BlockNumber", qan.Client.ClientUtils.ParameterToString(blockNumber)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetTransactionCount";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputGetTransactionCount>("/getTransactionCount/{Address}/{BlockNumber}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetTransactionCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the number of transactions sent from an address. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address from which the transaction count to be checked</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetTransactionCount</returns>
        public async System.Threading.Tasks.Task<OutputGetTransactionCount> QanGetTransactionCountAsync(string address, string blockNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetTransactionCount> localVarResponse = await QanGetTransactionCountWithHttpInfoAsync(address, blockNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the number of transactions sent from an address. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The address from which the transaction count to be checked</param>
        /// <param name="blockNumber">The block number in hexadecimal or decimal format or the string latest, earliest, pending</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetTransactionCount)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetTransactionCount>> QanGetTransactionCountWithHttpInfoAsync(string address, string blockNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'address' when calling QANApi->QanGetTransactionCount");
            }

            // verify the required parameter 'blockNumber' is set
            if (blockNumber == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'blockNumber' when calling QANApi->QanGetTransactionCount");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Address", qan.Client.ClientUtils.ParameterToString(address)); // path parameter
            localVarRequestOptions.PathParameters.Add("BlockNumber", qan.Client.ClientUtils.ParameterToString(blockNumber)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetTransactionCount";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputGetTransactionCount>("/getTransactionCount/{Address}/{BlockNumber}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetTransactionCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the receipt of a transaction by transaction hash. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of a transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputGetTransactionReceipt</returns>
        public OutputGetTransactionReceipt QanGetTransactionReceipt(string hash, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputGetTransactionReceipt> localVarResponse = QanGetTransactionReceiptWithHttpInfo(hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the receipt of a transaction by transaction hash. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of a transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputGetTransactionReceipt</returns>
        public qan.Client.ApiResponse<OutputGetTransactionReceipt> QanGetTransactionReceiptWithHttpInfo(string hash, int operationIndex = 0)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'hash' when calling QANApi->QanGetTransactionReceipt");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Hash", qan.Client.ClientUtils.ParameterToString(hash)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetTransactionReceipt";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputGetTransactionReceipt>("/getTransactionReceipt/{Hash}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetTransactionReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the receipt of a transaction by transaction hash. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of a transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputGetTransactionReceipt</returns>
        public async System.Threading.Tasks.Task<OutputGetTransactionReceipt> QanGetTransactionReceiptAsync(string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputGetTransactionReceipt> localVarResponse = await QanGetTransactionReceiptWithHttpInfoAsync(hash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the receipt of a transaction by transaction hash. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">The hash of a transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputGetTransactionReceipt)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputGetTransactionReceipt>> QanGetTransactionReceiptWithHttpInfoAsync(string hash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'hash' when calling QANApi->QanGetTransactionReceipt");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Hash", qan.Client.ClientUtils.ParameterToString(hash)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanGetTransactionReceipt";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputGetTransactionReceipt>("/getTransactionReceipt/{Hash}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanGetTransactionReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the priority fee needed to be included in a block. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputMaxPriorityFeePerGas</returns>
        public OutputMaxPriorityFeePerGas QanMaxPriorityFeePerGas(int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputMaxPriorityFeePerGas> localVarResponse = QanMaxPriorityFeePerGasWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the priority fee needed to be included in a block. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputMaxPriorityFeePerGas</returns>
        public qan.Client.ApiResponse<OutputMaxPriorityFeePerGas> QanMaxPriorityFeePerGasWithHttpInfo(int operationIndex = 0)
        {
            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QANApi.QanMaxPriorityFeePerGas";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputMaxPriorityFeePerGas>("/maxPriorityFeePerGas/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanMaxPriorityFeePerGas", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the priority fee needed to be included in a block. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputMaxPriorityFeePerGas</returns>
        public async System.Threading.Tasks.Task<OutputMaxPriorityFeePerGas> QanMaxPriorityFeePerGasAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputMaxPriorityFeePerGas> localVarResponse = await QanMaxPriorityFeePerGasWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the priority fee needed to be included in a block. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputMaxPriorityFeePerGas)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputMaxPriorityFeePerGas>> QanMaxPriorityFeePerGasWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QANApi.QanMaxPriorityFeePerGas";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputMaxPriorityFeePerGas>("/maxPriorityFeePerGas/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanMaxPriorityFeePerGas", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a filter in the node, to notify when a new block arrives. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputNewBlockFilter</returns>
        public OutputNewBlockFilter QanNewBlockFilter(int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputNewBlockFilter> localVarResponse = QanNewBlockFilterWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a filter in the node, to notify when a new block arrives. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputNewBlockFilter</returns>
        public qan.Client.ApiResponse<OutputNewBlockFilter> QanNewBlockFilterWithHttpInfo(int operationIndex = 0)
        {
            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QANApi.QanNewBlockFilter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputNewBlockFilter>("/newBlockFilter/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanNewBlockFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a filter in the node, to notify when a new block arrives. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputNewBlockFilter</returns>
        public async System.Threading.Tasks.Task<OutputNewBlockFilter> QanNewBlockFilterAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputNewBlockFilter> localVarResponse = await QanNewBlockFilterWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a filter in the node, to notify when a new block arrives. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputNewBlockFilter)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputNewBlockFilter>> QanNewBlockFilterWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QANApi.QanNewBlockFilter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputNewBlockFilter>("/newBlockFilter/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanNewBlockFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a filter object, based on filter options, to notify when the state changes (logs). 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputNewFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputNewFilter</returns>
        public OutputNewFilter QanNewFilter(InputNewFilter inputNewFilter, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputNewFilter> localVarResponse = QanNewFilterWithHttpInfo(inputNewFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a filter object, based on filter options, to notify when the state changes (logs). 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputNewFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputNewFilter</returns>
        public qan.Client.ApiResponse<OutputNewFilter> QanNewFilterWithHttpInfo(InputNewFilter inputNewFilter, int operationIndex = 0)
        {
            // verify the required parameter 'inputNewFilter' is set
            if (inputNewFilter == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'inputNewFilter' when calling QANApi->QanNewFilter");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputNewFilter;

            localVarRequestOptions.Operation = "QANApi.QanNewFilter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputNewFilter>("/newFilter/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanNewFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a filter object, based on filter options, to notify when the state changes (logs). 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputNewFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputNewFilter</returns>
        public async System.Threading.Tasks.Task<OutputNewFilter> QanNewFilterAsync(InputNewFilter inputNewFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputNewFilter> localVarResponse = await QanNewFilterWithHttpInfoAsync(inputNewFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a filter object, based on filter options, to notify when the state changes (logs). 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputNewFilter"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputNewFilter)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputNewFilter>> QanNewFilterWithHttpInfoAsync(InputNewFilter inputNewFilter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputNewFilter' is set
            if (inputNewFilter == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'inputNewFilter' when calling QANApi->QanNewFilter");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputNewFilter;

            localVarRequestOptions.Operation = "QANApi.QanNewFilter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputNewFilter>("/newFilter/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanNewFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a filter in the node to notify when new pending transactions arrive. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputNewPendingTransactionFilter</returns>
        public OutputNewPendingTransactionFilter QanNewPendingTransactionFilter(int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputNewPendingTransactionFilter> localVarResponse = QanNewPendingTransactionFilterWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a filter in the node to notify when new pending transactions arrive. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputNewPendingTransactionFilter</returns>
        public qan.Client.ApiResponse<OutputNewPendingTransactionFilter> QanNewPendingTransactionFilterWithHttpInfo(int operationIndex = 0)
        {
            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QANApi.QanNewPendingTransactionFilter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputNewPendingTransactionFilter>("/newPendingTransactionFilter/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanNewPendingTransactionFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a filter in the node to notify when new pending transactions arrive. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputNewPendingTransactionFilter</returns>
        public async System.Threading.Tasks.Task<OutputNewPendingTransactionFilter> QanNewPendingTransactionFilterAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputNewPendingTransactionFilter> localVarResponse = await QanNewPendingTransactionFilterWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a filter in the node to notify when new pending transactions arrive. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputNewPendingTransactionFilter)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputNewPendingTransactionFilter>> QanNewPendingTransactionFilterWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QANApi.QanNewPendingTransactionFilter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputNewPendingTransactionFilter>("/newPendingTransactionFilter/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanNewPendingTransactionFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates new message call transaction or a contract creation for signed transactions. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputSendRawTransaction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputSendRawTransaction</returns>
        public OutputSendRawTransaction QanSendRawTransaction(InputSendRawTransaction inputSendRawTransaction, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputSendRawTransaction> localVarResponse = QanSendRawTransactionWithHttpInfo(inputSendRawTransaction);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new message call transaction or a contract creation for signed transactions. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputSendRawTransaction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputSendRawTransaction</returns>
        public qan.Client.ApiResponse<OutputSendRawTransaction> QanSendRawTransactionWithHttpInfo(InputSendRawTransaction inputSendRawTransaction, int operationIndex = 0)
        {
            // verify the required parameter 'inputSendRawTransaction' is set
            if (inputSendRawTransaction == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'inputSendRawTransaction' when calling QANApi->QanSendRawTransaction");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputSendRawTransaction;

            localVarRequestOptions.Operation = "QANApi.QanSendRawTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputSendRawTransaction>("/sendRawTransaction/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanSendRawTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates new message call transaction or a contract creation for signed transactions. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputSendRawTransaction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputSendRawTransaction</returns>
        public async System.Threading.Tasks.Task<OutputSendRawTransaction> QanSendRawTransactionAsync(InputSendRawTransaction inputSendRawTransaction, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputSendRawTransaction> localVarResponse = await QanSendRawTransactionWithHttpInfoAsync(inputSendRawTransaction, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new message call transaction or a contract creation for signed transactions. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputSendRawTransaction"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputSendRawTransaction)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputSendRawTransaction>> QanSendRawTransactionWithHttpInfoAsync(InputSendRawTransaction inputSendRawTransaction, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputSendRawTransaction' is set
            if (inputSendRawTransaction == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'inputSendRawTransaction' when calling QANApi->QanSendRawTransaction");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputSendRawTransaction;

            localVarRequestOptions.Operation = "QANApi.QanSendRawTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputSendRawTransaction>("/sendRawTransaction/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanSendRawTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns an object with the sync status of the node if the node is out-of-sync and is syncing. Returns null when the node is already in sync. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputSyncing</returns>
        public OutputSyncing QanSyncing(int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputSyncing> localVarResponse = QanSyncingWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an object with the sync status of the node if the node is out-of-sync and is syncing. Returns null when the node is already in sync. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputSyncing</returns>
        public qan.Client.ApiResponse<OutputSyncing> QanSyncingWithHttpInfo(int operationIndex = 0)
        {
            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QANApi.QanSyncing";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputSyncing>("/syncing/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanSyncing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns an object with the sync status of the node if the node is out-of-sync and is syncing. Returns null when the node is already in sync. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputSyncing</returns>
        public async System.Threading.Tasks.Task<OutputSyncing> QanSyncingAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputSyncing> localVarResponse = await QanSyncingWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an object with the sync status of the node if the node is out-of-sync and is syncing. Returns null when the node is already in sync. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputSyncing)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputSyncing>> QanSyncingWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "QANApi.QanSyncing";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputSyncing>("/syncing/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanSyncing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Uninstalls a filter with the given filter id. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">The filter ID that needs to be uninstalled. It should always be called when watch is no longer needed. Additionally, Filters timeout when they aren&#39;t requested with getFilterChanges for a period of time</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputUninstallFilter</returns>
        public OutputUninstallFilter QanUninstallFilter(string filterId, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputUninstallFilter> localVarResponse = QanUninstallFilterWithHttpInfo(filterId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Uninstalls a filter with the given filter id. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">The filter ID that needs to be uninstalled. It should always be called when watch is no longer needed. Additionally, Filters timeout when they aren&#39;t requested with getFilterChanges for a period of time</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputUninstallFilter</returns>
        public qan.Client.ApiResponse<OutputUninstallFilter> QanUninstallFilterWithHttpInfo(string filterId, int operationIndex = 0)
        {
            // verify the required parameter 'filterId' is set
            if (filterId == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'filterId' when calling QANApi->QanUninstallFilter");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("FilterId", qan.Client.ClientUtils.ParameterToString(filterId)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanUninstallFilter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputUninstallFilter>("/uninstallFilter/{FilterId}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanUninstallFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Uninstalls a filter with the given filter id. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">The filter ID that needs to be uninstalled. It should always be called when watch is no longer needed. Additionally, Filters timeout when they aren&#39;t requested with getFilterChanges for a period of time</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputUninstallFilter</returns>
        public async System.Threading.Tasks.Task<OutputUninstallFilter> QanUninstallFilterAsync(string filterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputUninstallFilter> localVarResponse = await QanUninstallFilterWithHttpInfoAsync(filterId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Uninstalls a filter with the given filter id. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterId">The filter ID that needs to be uninstalled. It should always be called when watch is no longer needed. Additionally, Filters timeout when they aren&#39;t requested with getFilterChanges for a period of time</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputUninstallFilter)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputUninstallFilter>> QanUninstallFilterWithHttpInfoAsync(string filterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'filterId' is set
            if (filterId == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'filterId' when calling QANApi->QanUninstallFilter");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("FilterId", qan.Client.ClientUtils.ParameterToString(filterId)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanUninstallFilter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputUninstallFilter>("/uninstallFilter/{FilterId}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanUninstallFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the xlink validity time of the account of given address. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutputXlinkValid</returns>
        public OutputXlinkValid QanXlinkValid(string address, int operationIndex = 0)
        {
            qan.Client.ApiResponse<OutputXlinkValid> localVarResponse = QanXlinkValidWithHttpInfo(address);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the xlink validity time of the account of given address. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutputXlinkValid</returns>
        public qan.Client.ApiResponse<OutputXlinkValid> QanXlinkValidWithHttpInfo(string address, int operationIndex = 0)
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'address' when calling QANApi->QanXlinkValid");
            }

            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Address", qan.Client.ClientUtils.ParameterToString(address)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanXlinkValid";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OutputXlinkValid>("/xlinkValid/{Address}/", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanXlinkValid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the xlink validity time of the account of given address. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputXlinkValid</returns>
        public async System.Threading.Tasks.Task<OutputXlinkValid> QanXlinkValidAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            qan.Client.ApiResponse<OutputXlinkValid> localVarResponse = await QanXlinkValidWithHttpInfoAsync(address, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the xlink validity time of the account of given address. 
        /// </summary>
        /// <exception cref="qan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputXlinkValid)</returns>
        public async System.Threading.Tasks.Task<qan.Client.ApiResponse<OutputXlinkValid>> QanXlinkValidWithHttpInfoAsync(string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new qan.Client.ApiException(400, "Missing required parameter 'address' when calling QANApi->QanXlinkValid");
            }


            qan.Client.RequestOptions localVarRequestOptions = new qan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = qan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = qan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Address", qan.Client.ClientUtils.ParameterToString(address)); // path parameter

            localVarRequestOptions.Operation = "QANApi.QanXlinkValid";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutputXlinkValid>("/xlinkValid/{Address}/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QanXlinkValid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
