/*
 * QAN AutoApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = qan.Client.OpenAPIDateConverter;

namespace qan.qan
{
    /// <summary>
    /// ResponseTransactionReceipt
    /// </summary>
    [DataContract(Name = "Response_TransactionReceipt")]
    public partial class ResponseTransactionReceipt : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseTransactionReceipt" /> class.
        /// </summary>
        /// <param name="blockHash">The hash of the block. null when pending.</param>
        /// <param name="blockNumber">blockNumber.</param>
        /// <param name="contractAddress">The contract address created if the transaction was a contract creation, otherwise null.</param>
        /// <param name="cumulativeGasUsed">The total amount of gas used when this transaction was executed in the block.</param>
        /// <param name="effectiveGasPrice">The actual value per gas deducted from the sender account.</param>
        /// <param name="from">The address of the sender.</param>
        /// <param name="gasUsed">The amount of gas used by this specific transaction alone.</param>
        /// <param name="logs">An array of log objects that generated this transaction.</param>
        /// <param name="logsBloom">The bloom filter for light clients to quickly retrieve related logs.</param>
        /// <param name="status">It is either 1 (success) or 0 (failure) encoded as a decimal.</param>
        /// <param name="to">The address of the receiver. null when it&#39;s a contract creation transaction.</param>
        /// <param name="transactionHash">The hash of the transaction.</param>
        /// <param name="transactionIndex">An index of the transaction in the block.</param>
        /// <param name="type">The value type.</param>
        public ResponseTransactionReceipt(string blockHash = default(string), string blockNumber = default(string), string contractAddress = default(string), string cumulativeGasUsed = default(string), string effectiveGasPrice = default(string), string from = default(string), string gasUsed = default(string), List<ResponseLog> logs = default(List<ResponseLog>), string logsBloom = default(string), string status = default(string), string to = default(string), string transactionHash = default(string), string transactionIndex = default(string), string type = default(string))
        {
            this.BlockHash = blockHash;
            this.BlockNumber = blockNumber;
            this.ContractAddress = contractAddress;
            this.CumulativeGasUsed = cumulativeGasUsed;
            this.EffectiveGasPrice = effectiveGasPrice;
            this.From = from;
            this.GasUsed = gasUsed;
            this.Logs = logs;
            this.LogsBloom = logsBloom;
            this.Status = status;
            this.To = to;
            this.TransactionHash = transactionHash;
            this.TransactionIndex = transactionIndex;
            this.Type = type;
        }

        /// <summary>
        /// The hash of the block. null when pending
        /// </summary>
        /// <value>The hash of the block. null when pending</value>
        [DataMember(Name = "BlockHash", EmitDefaultValue = false)]
        public string BlockHash { get; set; }

        /// <summary>
        /// Gets or Sets BlockNumber
        /// </summary>
        [DataMember(Name = "BlockNumber", EmitDefaultValue = false)]
        public string BlockNumber { get; set; }

        /// <summary>
        /// The contract address created if the transaction was a contract creation, otherwise null
        /// </summary>
        /// <value>The contract address created if the transaction was a contract creation, otherwise null</value>
        [DataMember(Name = "ContractAddress", EmitDefaultValue = false)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// The total amount of gas used when this transaction was executed in the block
        /// </summary>
        /// <value>The total amount of gas used when this transaction was executed in the block</value>
        [DataMember(Name = "CumulativeGasUsed", EmitDefaultValue = false)]
        public string CumulativeGasUsed { get; set; }

        /// <summary>
        /// The actual value per gas deducted from the sender account
        /// </summary>
        /// <value>The actual value per gas deducted from the sender account</value>
        [DataMember(Name = "EffectiveGasPrice", EmitDefaultValue = false)]
        public string EffectiveGasPrice { get; set; }

        /// <summary>
        /// The address of the sender
        /// </summary>
        /// <value>The address of the sender</value>
        [DataMember(Name = "From", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// The amount of gas used by this specific transaction alone
        /// </summary>
        /// <value>The amount of gas used by this specific transaction alone</value>
        [DataMember(Name = "GasUsed", EmitDefaultValue = false)]
        public string GasUsed { get; set; }

        /// <summary>
        /// An array of log objects that generated this transaction
        /// </summary>
        /// <value>An array of log objects that generated this transaction</value>
        [DataMember(Name = "Logs", EmitDefaultValue = false)]
        public List<ResponseLog> Logs { get; set; }

        /// <summary>
        /// The bloom filter for light clients to quickly retrieve related logs
        /// </summary>
        /// <value>The bloom filter for light clients to quickly retrieve related logs</value>
        [DataMember(Name = "LogsBloom", EmitDefaultValue = false)]
        public string LogsBloom { get; set; }

        /// <summary>
        /// It is either 1 (success) or 0 (failure) encoded as a decimal
        /// </summary>
        /// <value>It is either 1 (success) or 0 (failure) encoded as a decimal</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The address of the receiver. null when it&#39;s a contract creation transaction
        /// </summary>
        /// <value>The address of the receiver. null when it&#39;s a contract creation transaction</value>
        [DataMember(Name = "To", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// The hash of the transaction
        /// </summary>
        /// <value>The hash of the transaction</value>
        [DataMember(Name = "TransactionHash", EmitDefaultValue = false)]
        public string TransactionHash { get; set; }

        /// <summary>
        /// An index of the transaction in the block
        /// </summary>
        /// <value>An index of the transaction in the block</value>
        [DataMember(Name = "TransactionIndex", EmitDefaultValue = false)]
        public string TransactionIndex { get; set; }

        /// <summary>
        /// The value type
        /// </summary>
        /// <value>The value type</value>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseTransactionReceipt {\n");
            sb.Append("  BlockHash: ").Append(BlockHash).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  CumulativeGasUsed: ").Append(CumulativeGasUsed).Append("\n");
            sb.Append("  EffectiveGasPrice: ").Append(EffectiveGasPrice).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  GasUsed: ").Append(GasUsed).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  LogsBloom: ").Append(LogsBloom).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  TransactionHash: ").Append(TransactionHash).Append("\n");
            sb.Append("  TransactionIndex: ").Append(TransactionIndex).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
