/*
 * QAN AutoApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = qan.Client.OpenAPIDateConverter;

namespace qan.qan
{
    /// <summary>
    /// SyncStatus
    /// </summary>
    [DataContract(Name = "SyncStatus")]
    public partial class SyncStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SyncStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncStatus" /> class.
        /// </summary>
        /// <param name="currentBlock">The current block, same as getFilterChangesblockNumber encoded as decimal (required).</param>
        /// <param name="highestBlock">The estimated highest block encoded as decimal (required).</param>
        /// <param name="startingBlock">The block at which the import started encoded as decimal (required).</param>
        public SyncStatus(string currentBlock = default(string), string highestBlock = default(string), string startingBlock = default(string))
        {
            // to ensure "currentBlock" is required (not null)
            if (currentBlock == null)
            {
                throw new ArgumentNullException("currentBlock is a required property for SyncStatus and cannot be null");
            }
            this.CurrentBlock = currentBlock;
            // to ensure "highestBlock" is required (not null)
            if (highestBlock == null)
            {
                throw new ArgumentNullException("highestBlock is a required property for SyncStatus and cannot be null");
            }
            this.HighestBlock = highestBlock;
            // to ensure "startingBlock" is required (not null)
            if (startingBlock == null)
            {
                throw new ArgumentNullException("startingBlock is a required property for SyncStatus and cannot be null");
            }
            this.StartingBlock = startingBlock;
        }

        /// <summary>
        /// The current block, same as getFilterChangesblockNumber encoded as decimal
        /// </summary>
        /// <value>The current block, same as getFilterChangesblockNumber encoded as decimal</value>
        [DataMember(Name = "CurrentBlock", IsRequired = true, EmitDefaultValue = true)]
        public string CurrentBlock { get; set; }

        /// <summary>
        /// The estimated highest block encoded as decimal
        /// </summary>
        /// <value>The estimated highest block encoded as decimal</value>
        [DataMember(Name = "HighestBlock", IsRequired = true, EmitDefaultValue = true)]
        public string HighestBlock { get; set; }

        /// <summary>
        /// The block at which the import started encoded as decimal
        /// </summary>
        /// <value>The block at which the import started encoded as decimal</value>
        [DataMember(Name = "StartingBlock", IsRequired = true, EmitDefaultValue = true)]
        public string StartingBlock { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SyncStatus {\n");
            sb.Append("  CurrentBlock: ").Append(CurrentBlock).Append("\n");
            sb.Append("  HighestBlock: ").Append(HighestBlock).Append("\n");
            sb.Append("  StartingBlock: ").Append(StartingBlock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
