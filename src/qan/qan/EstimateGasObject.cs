/*
 * QAN AutoApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = qan.Client.OpenAPIDateConverter;

namespace qan.qan
{
    /// <summary>
    /// EstimateGasObject
    /// </summary>
    [DataContract(Name = "EstimateGasObject")]
    public partial class EstimateGasObject : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EstimateGasObject" /> class.
        /// </summary>
        /// <param name="balance">Fake balance to set for the account before executing the call.</param>
        /// <param name="code">Fake EVM bytecode to inject into the account before executing the call.</param>
        /// <param name="nonce">Fake nonce to set for the account before executing the call.</param>
        /// <param name="state">Fake key-value mapping to override all slots in the account storage before executing the call.</param>
        /// <param name="stateDiff">Fake key-value mapping to override individual slots in the account storage before executing the call.</param>
        public EstimateGasObject(string balance = default(string), int code = default(int), string nonce = default(string), string state = default(string), string stateDiff = default(string))
        {
            this.Balance = balance;
            this.Code = code;
            this.Nonce = nonce;
            this.State = state;
            this.StateDiff = stateDiff;
        }

        /// <summary>
        /// Fake balance to set for the account before executing the call
        /// </summary>
        /// <value>Fake balance to set for the account before executing the call</value>
        [DataMember(Name = "Balance", EmitDefaultValue = false)]
        public string Balance { get; set; }

        /// <summary>
        /// Fake EVM bytecode to inject into the account before executing the call
        /// </summary>
        /// <value>Fake EVM bytecode to inject into the account before executing the call</value>
        [DataMember(Name = "Code", EmitDefaultValue = false)]
        public int Code { get; set; }

        /// <summary>
        /// Fake nonce to set for the account before executing the call
        /// </summary>
        /// <value>Fake nonce to set for the account before executing the call</value>
        [DataMember(Name = "Nonce", EmitDefaultValue = false)]
        public string Nonce { get; set; }

        /// <summary>
        /// Fake key-value mapping to override all slots in the account storage before executing the call
        /// </summary>
        /// <value>Fake key-value mapping to override all slots in the account storage before executing the call</value>
        [DataMember(Name = "State", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Fake key-value mapping to override individual slots in the account storage before executing the call
        /// </summary>
        /// <value>Fake key-value mapping to override individual slots in the account storage before executing the call</value>
        [DataMember(Name = "StateDiff", EmitDefaultValue = false)]
        public string StateDiff { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EstimateGasObject {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateDiff: ").Append(StateDiff).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
