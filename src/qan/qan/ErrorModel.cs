/*
 * QAN AutoApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = qan.Client.OpenAPIDateConverter;

namespace qan.qan
{
    /// <summary>
    /// ErrorModel
    /// </summary>
    [DataContract(Name = "ErrorModel")]
    public partial class ErrorModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorModel" /> class.
        /// </summary>
        /// <param name="detail">A human-readable explanation specific to this occurrence of the problem..</param>
        /// <param name="errors">Optional list of individual error details.</param>
        /// <param name="instance">A URI reference that identifies the specific occurrence of the problem..</param>
        /// <param name="status">HTTP status code.</param>
        /// <param name="title">A short, human-readable summary of the problem type. This value should not change between occurrences of the error..</param>
        /// <param name="type">A URI reference to human-readable documentation for the error. (default to &quot;about:blank&quot;).</param>
        public ErrorModel(string detail = default(string), List<ErrorDetail> errors = default(List<ErrorDetail>), string instance = default(string), long status = default(long), string title = default(string), string type = @"about:blank")
        {
            this.Detail = detail;
            this.Errors = errors;
            this.Instance = instance;
            this.Status = status;
            this.Title = title;
            // use default value if no "type" provided
            this.Type = type ?? @"about:blank";
        }

        /// <summary>
        /// A URL to the JSON Schema for this object.
        /// </summary>
        /// <value>A URL to the JSON Schema for this object.</value>
        [DataMember(Name = "$schema", EmitDefaultValue = false)]
        public string Schema { get; private set; }

        /// <summary>
        /// Returns false as Schema should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSchema()
        {
            return false;
        }
        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem.
        /// </summary>
        /// <value>A human-readable explanation specific to this occurrence of the problem.</value>
        [DataMember(Name = "detail", EmitDefaultValue = false)]
        public string Detail { get; set; }

        /// <summary>
        /// Optional list of individual error details
        /// </summary>
        /// <value>Optional list of individual error details</value>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public List<ErrorDetail> Errors { get; set; }

        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem.
        /// </summary>
        /// <value>A URI reference that identifies the specific occurrence of the problem.</value>
        [DataMember(Name = "instance", EmitDefaultValue = false)]
        public string Instance { get; set; }

        /// <summary>
        /// HTTP status code
        /// </summary>
        /// <value>HTTP status code</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public long Status { get; set; }

        /// <summary>
        /// A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
        /// </summary>
        /// <value>A short, human-readable summary of the problem type. This value should not change between occurrences of the error.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// A URI reference to human-readable documentation for the error.
        /// </summary>
        /// <value>A URI reference to human-readable documentation for the error.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ErrorModel {\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
