/*
 * QAN AutoApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = qan.Client.OpenAPIDateConverter;

namespace qan.qan
{
    /// <summary>
    /// OutputFeeHistory
    /// </summary>
    [DataContract(Name = "Output_feeHistory")]
    public partial class OutputFeeHistory : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputFeeHistory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OutputFeeHistory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputFeeHistory" /> class.
        /// </summary>
        /// <param name="baseFeePerGas">An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks (required).</param>
        /// <param name="gasUsedRatio">An array of block gas used ratios. These are calculated as the ratio of gasUsed and gasLimit (required).</param>
        /// <param name="oldestBlock">The lowest number block of the returned range encoded in decimal format (required).</param>
        /// <param name="reward">An array of effective priority fees per gas data points from a single block. All zeroes are returned if the block is empty (required).</param>
        public OutputFeeHistory(List<string> baseFeePerGas = default(List<string>), List<double> gasUsedRatio = default(List<double>), string oldestBlock = default(string), List<List<string>> reward = default(List<List<string>>))
        {
            // to ensure "baseFeePerGas" is required (not null)
            if (baseFeePerGas == null)
            {
                throw new ArgumentNullException("baseFeePerGas is a required property for OutputFeeHistory and cannot be null");
            }
            this.BaseFeePerGas = baseFeePerGas;
            // to ensure "gasUsedRatio" is required (not null)
            if (gasUsedRatio == null)
            {
                throw new ArgumentNullException("gasUsedRatio is a required property for OutputFeeHistory and cannot be null");
            }
            this.GasUsedRatio = gasUsedRatio;
            // to ensure "oldestBlock" is required (not null)
            if (oldestBlock == null)
            {
                throw new ArgumentNullException("oldestBlock is a required property for OutputFeeHistory and cannot be null");
            }
            this.OldestBlock = oldestBlock;
            // to ensure "reward" is required (not null)
            if (reward == null)
            {
                throw new ArgumentNullException("reward is a required property for OutputFeeHistory and cannot be null");
            }
            this.Reward = reward;
        }

        /// <summary>
        /// A URL to the JSON Schema for this object.
        /// </summary>
        /// <value>A URL to the JSON Schema for this object.</value>
        [DataMember(Name = "$schema", EmitDefaultValue = false)]
        public string Schema { get; private set; }

        /// <summary>
        /// Returns false as Schema should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSchema()
        {
            return false;
        }
        /// <summary>
        /// An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks
        /// </summary>
        /// <value>An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks</value>
        [DataMember(Name = "BaseFeePerGas", IsRequired = true, EmitDefaultValue = true)]
        public List<string> BaseFeePerGas { get; set; }

        /// <summary>
        /// An array of block gas used ratios. These are calculated as the ratio of gasUsed and gasLimit
        /// </summary>
        /// <value>An array of block gas used ratios. These are calculated as the ratio of gasUsed and gasLimit</value>
        [DataMember(Name = "GasUsedRatio", IsRequired = true, EmitDefaultValue = true)]
        public List<double> GasUsedRatio { get; set; }

        /// <summary>
        /// The lowest number block of the returned range encoded in decimal format
        /// </summary>
        /// <value>The lowest number block of the returned range encoded in decimal format</value>
        [DataMember(Name = "OldestBlock", IsRequired = true, EmitDefaultValue = true)]
        public string OldestBlock { get; set; }

        /// <summary>
        /// An array of effective priority fees per gas data points from a single block. All zeroes are returned if the block is empty
        /// </summary>
        /// <value>An array of effective priority fees per gas data points from a single block. All zeroes are returned if the block is empty</value>
        [DataMember(Name = "Reward", IsRequired = true, EmitDefaultValue = true)]
        public List<List<string>> Reward { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutputFeeHistory {\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  BaseFeePerGas: ").Append(BaseFeePerGas).Append("\n");
            sb.Append("  GasUsedRatio: ").Append(GasUsedRatio).Append("\n");
            sb.Append("  OldestBlock: ").Append(OldestBlock).Append("\n");
            sb.Append("  Reward: ").Append(Reward).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
