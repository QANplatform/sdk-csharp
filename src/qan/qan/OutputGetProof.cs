/*
 * QAN AutoApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = qan.Client.OpenAPIDateConverter;

namespace qan.qan
{
    /// <summary>
    /// OutputGetProof
    /// </summary>
    [DataContract(Name = "Output_getProof")]
    public partial class OutputGetProof : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputGetProof" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OutputGetProof() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputGetProof" /> class.
        /// </summary>
        /// <param name="accountProof">An array of rlp-serialized MerkleTree-Nodes which starts with the stateRoot-Node and follows the path of the SHA3 address as key (required).</param>
        /// <param name="address">The address associated with the account (required).</param>
        /// <param name="balance">The current balance of the account in wei (required).</param>
        /// <param name="codeHash">A 32 byte hash of the code of the account (required).</param>
        /// <param name="nonce">The hash of the generated proof-of-work. Null if pending (required).</param>
        /// <param name="storageHash">A 32 byte SHA3 of the storageRoot. All storage will deliver a MerkleProof starting with this rootHash (required).</param>
        /// <param name="storageProof">An array of storage-entries as requested. Each entry is an object with the following fields: (required).</param>
        public OutputGetProof(string accountProof = default(string), string address = default(string), string balance = default(string), string codeHash = default(string), string nonce = default(string), string storageHash = default(string), List<ResponseStorageEntry> storageProof = default(List<ResponseStorageEntry>))
        {
            // to ensure "accountProof" is required (not null)
            if (accountProof == null)
            {
                throw new ArgumentNullException("accountProof is a required property for OutputGetProof and cannot be null");
            }
            this.AccountProof = accountProof;
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for OutputGetProof and cannot be null");
            }
            this.Address = address;
            // to ensure "balance" is required (not null)
            if (balance == null)
            {
                throw new ArgumentNullException("balance is a required property for OutputGetProof and cannot be null");
            }
            this.Balance = balance;
            // to ensure "codeHash" is required (not null)
            if (codeHash == null)
            {
                throw new ArgumentNullException("codeHash is a required property for OutputGetProof and cannot be null");
            }
            this.CodeHash = codeHash;
            // to ensure "nonce" is required (not null)
            if (nonce == null)
            {
                throw new ArgumentNullException("nonce is a required property for OutputGetProof and cannot be null");
            }
            this.Nonce = nonce;
            // to ensure "storageHash" is required (not null)
            if (storageHash == null)
            {
                throw new ArgumentNullException("storageHash is a required property for OutputGetProof and cannot be null");
            }
            this.StorageHash = storageHash;
            // to ensure "storageProof" is required (not null)
            if (storageProof == null)
            {
                throw new ArgumentNullException("storageProof is a required property for OutputGetProof and cannot be null");
            }
            this.StorageProof = storageProof;
        }

        /// <summary>
        /// A URL to the JSON Schema for this object.
        /// </summary>
        /// <value>A URL to the JSON Schema for this object.</value>
        [DataMember(Name = "$schema", EmitDefaultValue = false)]
        public string Schema { get; private set; }

        /// <summary>
        /// Returns false as Schema should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSchema()
        {
            return false;
        }
        /// <summary>
        /// An array of rlp-serialized MerkleTree-Nodes which starts with the stateRoot-Node and follows the path of the SHA3 address as key
        /// </summary>
        /// <value>An array of rlp-serialized MerkleTree-Nodes which starts with the stateRoot-Node and follows the path of the SHA3 address as key</value>
        [DataMember(Name = "AccountProof", IsRequired = true, EmitDefaultValue = true)]
        public string AccountProof { get; set; }

        /// <summary>
        /// The address associated with the account
        /// </summary>
        /// <value>The address associated with the account</value>
        [DataMember(Name = "Address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// The current balance of the account in wei
        /// </summary>
        /// <value>The current balance of the account in wei</value>
        [DataMember(Name = "Balance", IsRequired = true, EmitDefaultValue = true)]
        public string Balance { get; set; }

        /// <summary>
        /// A 32 byte hash of the code of the account
        /// </summary>
        /// <value>A 32 byte hash of the code of the account</value>
        [DataMember(Name = "CodeHash", IsRequired = true, EmitDefaultValue = true)]
        public string CodeHash { get; set; }

        /// <summary>
        /// The hash of the generated proof-of-work. Null if pending
        /// </summary>
        /// <value>The hash of the generated proof-of-work. Null if pending</value>
        [DataMember(Name = "Nonce", IsRequired = true, EmitDefaultValue = true)]
        public string Nonce { get; set; }

        /// <summary>
        /// A 32 byte SHA3 of the storageRoot. All storage will deliver a MerkleProof starting with this rootHash
        /// </summary>
        /// <value>A 32 byte SHA3 of the storageRoot. All storage will deliver a MerkleProof starting with this rootHash</value>
        [DataMember(Name = "StorageHash", IsRequired = true, EmitDefaultValue = true)]
        public string StorageHash { get; set; }

        /// <summary>
        /// An array of storage-entries as requested. Each entry is an object with the following fields:
        /// </summary>
        /// <value>An array of storage-entries as requested. Each entry is an object with the following fields:</value>
        [DataMember(Name = "StorageProof", IsRequired = true, EmitDefaultValue = true)]
        public List<ResponseStorageEntry> StorageProof { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutputGetProof {\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  AccountProof: ").Append(AccountProof).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  CodeHash: ").Append(CodeHash).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  StorageHash: ").Append(StorageHash).Append("\n");
            sb.Append("  StorageProof: ").Append(StorageProof).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
