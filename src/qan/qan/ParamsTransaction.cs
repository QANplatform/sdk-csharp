/*
 * QAN AutoApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = qan.Client.OpenAPIDateConverter;

namespace qan.qan
{
    /// <summary>
    /// ParamsTransaction
    /// </summary>
    [DataContract(Name = "Params_Transaction")]
    public partial class ParamsTransaction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParamsTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParamsTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParamsTransaction" /> class.
        /// </summary>
        /// <param name="data">The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation..</param>
        /// <param name="from">The address from which the transaction is sent.</param>
        /// <param name="gas">The integer of gas provided for the transaction execution.</param>
        /// <param name="gasPrice">The integer of gasPrice used for each paid gas encoded as hexadecimal.</param>
        /// <param name="to">The address to which the transaction is addressed (required).</param>
        /// <param name="value">The integer of value sent with this transaction encoded as hexadecimal.</param>
        public ParamsTransaction(string data = default(string), string from = default(string), string gas = default(string), string gasPrice = default(string), string to = default(string), string value = default(string))
        {
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for ParamsTransaction and cannot be null");
            }
            this.To = to;
            this.Data = data;
            this.From = from;
            this.Gas = gas;
            this.GasPrice = gasPrice;
            this.Value = value;
        }

        /// <summary>
        /// The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.
        /// </summary>
        /// <value>The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.</value>
        [DataMember(Name = "Data", EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// The address from which the transaction is sent
        /// </summary>
        /// <value>The address from which the transaction is sent</value>
        [DataMember(Name = "From", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// The integer of gas provided for the transaction execution
        /// </summary>
        /// <value>The integer of gas provided for the transaction execution</value>
        [DataMember(Name = "Gas", EmitDefaultValue = false)]
        public string Gas { get; set; }

        /// <summary>
        /// The integer of gasPrice used for each paid gas encoded as hexadecimal
        /// </summary>
        /// <value>The integer of gasPrice used for each paid gas encoded as hexadecimal</value>
        [DataMember(Name = "GasPrice", EmitDefaultValue = false)]
        public string GasPrice { get; set; }

        /// <summary>
        /// The address to which the transaction is addressed
        /// </summary>
        /// <value>The address to which the transaction is addressed</value>
        [DataMember(Name = "To", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// The integer of value sent with this transaction encoded as hexadecimal
        /// </summary>
        /// <value>The integer of value sent with this transaction encoded as hexadecimal</value>
        [DataMember(Name = "Value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParamsTransaction {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Gas: ").Append(Gas).Append("\n");
            sb.Append("  GasPrice: ").Append(GasPrice).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
