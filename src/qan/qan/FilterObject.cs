/*
 * QAN AutoApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = qan.Client.OpenAPIDateConverter;

namespace qan.qan
{
    /// <summary>
    /// FilterObject
    /// </summary>
    [DataContract(Name = "FilterObject")]
    public partial class FilterObject : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FilterObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterObject" /> class.
        /// </summary>
        /// <param name="address">The contract address or a list of addresses from which logs should originate (required).</param>
        /// <param name="fromBlock">fromBlock (required).</param>
        /// <param name="toBlock">toBlock (required).</param>
        /// <param name="topics">topics (required).</param>
        public FilterObject(string address = default(string), string fromBlock = default(string), string toBlock = default(string), List<string> topics = default(List<string>))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for FilterObject and cannot be null");
            }
            this.Address = address;
            // to ensure "fromBlock" is required (not null)
            if (fromBlock == null)
            {
                throw new ArgumentNullException("fromBlock is a required property for FilterObject and cannot be null");
            }
            this.FromBlock = fromBlock;
            // to ensure "toBlock" is required (not null)
            if (toBlock == null)
            {
                throw new ArgumentNullException("toBlock is a required property for FilterObject and cannot be null");
            }
            this.ToBlock = toBlock;
            // to ensure "topics" is required (not null)
            if (topics == null)
            {
                throw new ArgumentNullException("topics is a required property for FilterObject and cannot be null");
            }
            this.Topics = topics;
        }

        /// <summary>
        /// The contract address or a list of addresses from which logs should originate
        /// </summary>
        /// <value>The contract address or a list of addresses from which logs should originate</value>
        [DataMember(Name = "Address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets FromBlock
        /// </summary>
        [DataMember(Name = "FromBlock", IsRequired = true, EmitDefaultValue = true)]
        public string FromBlock { get; set; }

        /// <summary>
        /// Gets or Sets ToBlock
        /// </summary>
        [DataMember(Name = "ToBlock", IsRequired = true, EmitDefaultValue = true)]
        public string ToBlock { get; set; }

        /// <summary>
        /// Gets or Sets Topics
        /// </summary>
        [DataMember(Name = "Topics", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Topics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FilterObject {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  FromBlock: ").Append(FromBlock).Append("\n");
            sb.Append("  ToBlock: ").Append(ToBlock).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
