/*
 * QAN AutoApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = qan.Client.OpenAPIDateConverter;

namespace qan.qan
{
    /// <summary>
    /// InputFeeHistory
    /// </summary>
    [DataContract(Name = "Input_feeHistory")]
    public partial class InputFeeHistory : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputFeeHistory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputFeeHistory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputFeeHistory" /> class.
        /// </summary>
        /// <param name="blockCount">The number of blocks in the requested range. Between 1 and 1024 blocks can be requested in a single query. It will return less than the requested range if not all blocks are available (required) (default to 2).</param>
        /// <param name="newestBlock">The highest number block of the requested range in hexadecimal format or tags. The supported tag values include earliest for the earliest/genesis block, latest for the latest mined block, pending for the pending state/transactions. (required) (default to &quot;latest&quot;).</param>
        /// <param name="rewardPercentiles">A list of percentile values with a monotonic increase in value. The transactions will be ranked by effective tip per gas for each block in the requested range, and the corresponding effective tip for the percentile will be calculated while taking gas consumption into consideration (required).</param>
        public InputFeeHistory(int blockCount = 2, string newestBlock = @"latest", List<int> rewardPercentiles = default(List<int>))
        {
            this.BlockCount = blockCount;
            // to ensure "newestBlock" is required (not null)
            if (newestBlock == null)
            {
                throw new ArgumentNullException("newestBlock is a required property for InputFeeHistory and cannot be null");
            }
            this.NewestBlock = newestBlock;
            // to ensure "rewardPercentiles" is required (not null)
            if (rewardPercentiles == null)
            {
                throw new ArgumentNullException("rewardPercentiles is a required property for InputFeeHistory and cannot be null");
            }
            this.RewardPercentiles = rewardPercentiles;
        }

        /// <summary>
        /// A URL to the JSON Schema for this object.
        /// </summary>
        /// <value>A URL to the JSON Schema for this object.</value>
        [DataMember(Name = "$schema", EmitDefaultValue = false)]
        public string Schema { get; private set; }

        /// <summary>
        /// Returns false as Schema should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSchema()
        {
            return false;
        }
        /// <summary>
        /// The number of blocks in the requested range. Between 1 and 1024 blocks can be requested in a single query. It will return less than the requested range if not all blocks are available
        /// </summary>
        /// <value>The number of blocks in the requested range. Between 1 and 1024 blocks can be requested in a single query. It will return less than the requested range if not all blocks are available</value>
        [DataMember(Name = "BlockCount", IsRequired = true, EmitDefaultValue = true)]
        public int BlockCount { get; set; }

        /// <summary>
        /// The highest number block of the requested range in hexadecimal format or tags. The supported tag values include earliest for the earliest/genesis block, latest for the latest mined block, pending for the pending state/transactions.
        /// </summary>
        /// <value>The highest number block of the requested range in hexadecimal format or tags. The supported tag values include earliest for the earliest/genesis block, latest for the latest mined block, pending for the pending state/transactions.</value>
        [DataMember(Name = "NewestBlock", IsRequired = true, EmitDefaultValue = true)]
        public string NewestBlock { get; set; }

        /// <summary>
        /// A list of percentile values with a monotonic increase in value. The transactions will be ranked by effective tip per gas for each block in the requested range, and the corresponding effective tip for the percentile will be calculated while taking gas consumption into consideration
        /// </summary>
        /// <value>A list of percentile values with a monotonic increase in value. The transactions will be ranked by effective tip per gas for each block in the requested range, and the corresponding effective tip for the percentile will be calculated while taking gas consumption into consideration</value>
        [DataMember(Name = "RewardPercentiles", IsRequired = true, EmitDefaultValue = true)]
        public List<int> RewardPercentiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InputFeeHistory {\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  BlockCount: ").Append(BlockCount).Append("\n");
            sb.Append("  NewestBlock: ").Append(NewestBlock).Append("\n");
            sb.Append("  RewardPercentiles: ").Append(RewardPercentiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
